syntax = "proto2";

import "steammessages_unified_base.steamworkssdk.proto";

option cc_generic_services = true;

service Player {
    rpc GetMutualFriendsForIncomingInvites(CPlayer_GetMutualFriendsForIncomingInvites_Request) returns (CPlayer_GetMutualFriendsForIncomingInvites_Response);
    rpc GetFriendsGameplayInfo(CPlayer_GetFriendsGameplayInfo_Request) returns (CPlayer_GetFriendsGameplayInfo_Response);
    rpc GetGameBadgeLevels(CPlayer_GetGameBadgeLevels_Request) returns (CPlayer_GetGameBadgeLevels_Response);
    rpc ClientGetLastPlayedTimes(CPlayer_GetLastPlayedTimes_Request) returns (CPlayer_GetLastPlayedTimes_Response);
    rpc AcceptSSA(CPlayer_AcceptSSA_Request) returns (CPlayer_AcceptSSA_Response);
    rpc GetNicknameList(CPlayer_GetNicknameList_Request) returns (CPlayer_GetNicknameList_Response);
    rpc GetPerFriendPreferences(CPlayer_GetPerFriendPreferences_Request) returns (CPlayer_GetPerFriendPreferences_Response);
    rpc SetPerFriendPreferences(CPlayer_SetPerFriendPreferences_Request) returns (CPlayer_SetPerFriendPreferences_Response);
    rpc AddFriend(CPlayer_AddFriend_Request) returns (CPlayer_AddFriend_Response);
    rpc RemoveFriend(CPlayer_RemoveFriend_Request) returns (CPlayer_RemoveFriend_Response);
    rpc IgnoreFriend(CPlayer_IgnoreFriend_Request) returns (CPlayer_IgnoreFriend_Response);
    rpc GetCommunityPreferences(CPlayer_GetCommunityPreferences_Request) returns (CPlayer_GetCommunityPreferences_Response);
    rpc SetCommunityPreferences(CPlayer_SetCommunityPreferences_Request) returns (CPlayer_SetCommunityPreferences_Response);
    rpc GetNewSteamAnnouncementState(CPlayer_GetNewSteamAnnouncementState_Request) returns (CPlayer_GetNewSteamAnnouncementState_Response);
    rpc UpdateSteamAnnouncementLastRead(CPlayer_UpdateSteamAnnouncementLastRead_Request) returns (CPlayer_UpdateSteamAnnouncementLastRead_Response);
}

message CPlayer_GetMutualFriendsForIncomingInvites_Request {
    
}

message CPlayer_IncomingInviteMutualFriendList {
    optional fixed64 steamid = 1;
    repeated uint32 mutual_friend_account_ids = 2;
}

message CPlayer_GetMutualFriendsForIncomingInvites_Response {
    repeated CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
}

message CPlayer_GetFriendsGameplayInfo_Request {
    optional uint32 appid = 1;
}

message CPlayer_GetFriendsGameplayInfo_Response {
    optional OwnGameplayInfo your_info = 1;
    message OwnGameplayInfo {
        optional fixed64 steamid = 1;
        optional uint32 minutes_played = 2;
        optional uint32 minutes_played_forever = 3;
        optional bool in_wishlist = 4;
        optional bool owned = 5;
    }
    
    repeated FriendsGameplayInfo in_game = 2;
    message FriendsGameplayInfo {
        optional fixed64 steamid = 1;
        optional uint32 minutes_played = 2;
        optional uint32 minutes_played_forever = 3;
    }
    
    repeated FriendsGameplayInfo played_recently = 3;
    repeated FriendsGameplayInfo played_ever = 4;
    repeated FriendsGameplayInfo owns = 5;
    repeated FriendsGameplayInfo in_wishlist = 6;
}

message CPlayer_GetGameBadgeLevels_Request {
    optional uint32 appid = 1;
}

message CPlayer_GetGameBadgeLevels_Response {
    optional uint32 player_level = 1;
    
    repeated Badge badges = 2;
    message Badge {
        optional int32 level = 1;
        optional int32 series = 2;
        optional uint32 border_color = 3;
    }
}

message CPlayer_GetLastPlayedTimes_Request {
    optional uint32 min_last_played = 1;
}

message CPlayer_GetLastPlayedTimes_Response {
    repeated Game games = 1;
    message Game {
        optional int32 appid = 1;
        optional uint32 last_playtime = 2;
        optional int32 playtime_2weeks = 3;
        optional int32 playtime_forever = 4;
        optional uint32 first_playtime = 5;
    }
}

message CPlayer_AcceptSSA_Request {
    
}

message CPlayer_AcceptSSA_Response {
    
}

message CPlayer_GetNicknameList_Request {
    
}

message CPlayer_GetNicknameList_Response {
    repeated PlayerNickname nicknames = 1;
    message PlayerNickname {
        optional fixed32 accountid = 1;
        optional string nickname = 2;
    }
}

message CPlayer_GetPerFriendPreferences_Request {
    
}

message PerFriendPreferences {
    optional fixed32 accountid = 1;
    optional string nickname = 2;
    optional ENotificationSetting notifications_showingame = 3;
    optional ENotificationSetting notifications_showonline = 4;
    optional ENotificationSetting notifications_showmessages = 5;
    optional ENotificationSetting sounds_showingame = 6;
    optional ENotificationSetting sounds_showonline = 7;
    optional ENotificationSetting sounds_showmessages = 8;
    optional ENotificationSetting notifications_sendmobile = 9;
}

message CPlayer_GetPerFriendPreferences_Response {
    repeated PerFriendPreferences preferences = 1;
}

message CPlayer_SetPerFriendPreferences_Request {
    optional PerFriendPreferences preferences = 1;
}

message CPlayer_SetPerFriendPreferences_Response {
    
}

message CPlayer_AddFriend_Request {
    optional fixed64 steamid = 1;
}

message CPlayer_AddFriend_Response {
    optional bool invite_sent = 1;
    optional uint32 friend_relationship = 2;
}

message CPlayer_RemoveFriend_Request {
    optional fixed64 steamid = 1;
}

message CPlayer_RemoveFriend_Response {
    optional uint32 friend_relationship = 1;
}

message CPlayer_IgnoreFriend_Request {
    optional fixed64 steamid = 1;
    optional bool unignore = 2;
}

message CPlayer_IgnoreFriend_Response {
    optional uint32 friend_relationship = 1;
}

message CPlayer_GetCommunityPreferences_Request {
    
}

message CPlayer_CommunityPreferences {
    optional bool hide_adult_content_violence = 1 [default = true];
    optional bool hide_adult_content_sex = 2 [default = true];
    optional bool parenthesize_nicknames = 4 [default = false];
    optional uint32 timestamp_updated = 3;
}

message CPlayer_GetCommunityPreferences_Response {
    optional CPlayer_CommunityPreferences preferences = 1;
}

message CPlayer_SetCommunityPreferences_Request {
    optional CPlayer_CommunityPreferences preferences = 1;
}

message CPlayer_SetCommunityPreferences_Response {
    
}

message CPlayer_GetNewSteamAnnouncementState_Request {
    optional int32 language = 1;
}

message CPlayer_GetNewSteamAnnouncementState_Response {
    optional int32 state = 1;
    optional string announcement_headline = 2;
    optional string announcement_url = 3;
    optional uint32 time_posted = 4;
    optional uint64 announcement_gid = 5;
}

message CPlayer_UpdateSteamAnnouncementLastRead_Request {
    optional uint64 announcement_gid = 1;
    optional uint32 time_posted = 2;
}

message CPlayer_UpdateSteamAnnouncementLastRead_Response {
    
}

enum ENotificationSetting {
    k_ENotificationSettingNotifyUseDefault = 0;
    k_ENotificationSettingAlways = 1;
    k_ENotificationSettingNever = 2;
}
