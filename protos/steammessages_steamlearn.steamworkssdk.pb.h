// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_steamlearn.steamworkssdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsteamlearn_2esteamworkssdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsteamlearn_2esteamworkssdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fsteamlearn_2esteamworkssdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
class CMsgSteamLearnData;
struct CMsgSteamLearnDataDefaultTypeInternal;
extern CMsgSteamLearnDataDefaultTypeInternal _CMsgSteamLearnData_default_instance_;
class CMsgSteamLearnDataElement;
struct CMsgSteamLearnDataElementDefaultTypeInternal;
extern CMsgSteamLearnDataElementDefaultTypeInternal _CMsgSteamLearnDataElement_default_instance_;
class CMsgSteamLearnDataList;
struct CMsgSteamLearnDataListDefaultTypeInternal;
extern CMsgSteamLearnDataListDefaultTypeInternal _CMsgSteamLearnDataList_default_instance_;
class CMsgSteamLearnDataObject;
struct CMsgSteamLearnDataObjectDefaultTypeInternal;
extern CMsgSteamLearnDataObjectDefaultTypeInternal _CMsgSteamLearnDataObject_default_instance_;
class CMsgSteamLearnDataSource;
struct CMsgSteamLearnDataSourceDefaultTypeInternal;
extern CMsgSteamLearnDataSourceDefaultTypeInternal _CMsgSteamLearnDataSource_default_instance_;
class CMsgSteamLearnDataSourceDescElement;
struct CMsgSteamLearnDataSourceDescElementDefaultTypeInternal;
extern CMsgSteamLearnDataSourceDescElementDefaultTypeInternal _CMsgSteamLearnDataSourceDescElement_default_instance_;
class CMsgSteamLearnDataSourceDescObject;
struct CMsgSteamLearnDataSourceDescObjectDefaultTypeInternal;
extern CMsgSteamLearnDataSourceDescObjectDefaultTypeInternal _CMsgSteamLearnDataSourceDescObject_default_instance_;
class CMsgSteamLearnHMACKeys;
struct CMsgSteamLearnHMACKeysDefaultTypeInternal;
extern CMsgSteamLearnHMACKeysDefaultTypeInternal _CMsgSteamLearnHMACKeys_default_instance_;
class CMsgSteamLearnHMACKeys_CacheDataKeys;
struct CMsgSteamLearnHMACKeys_CacheDataKeysDefaultTypeInternal;
extern CMsgSteamLearnHMACKeys_CacheDataKeysDefaultTypeInternal _CMsgSteamLearnHMACKeys_CacheDataKeys_default_instance_;
class CMsgSteamLearnHMACKeys_SnapshotProjectKeys;
struct CMsgSteamLearnHMACKeys_SnapshotProjectKeysDefaultTypeInternal;
extern CMsgSteamLearnHMACKeys_SnapshotProjectKeysDefaultTypeInternal _CMsgSteamLearnHMACKeys_SnapshotProjectKeys_default_instance_;
class CMsgSteamLearn_AccessData;
struct CMsgSteamLearn_AccessDataDefaultTypeInternal;
extern CMsgSteamLearn_AccessDataDefaultTypeInternal _CMsgSteamLearn_AccessData_default_instance_;
class CMsgSteamLearn_BatchOperation_Request;
struct CMsgSteamLearn_BatchOperation_RequestDefaultTypeInternal;
extern CMsgSteamLearn_BatchOperation_RequestDefaultTypeInternal _CMsgSteamLearn_BatchOperation_Request_default_instance_;
class CMsgSteamLearn_BatchOperation_Response;
struct CMsgSteamLearn_BatchOperation_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_BatchOperation_ResponseDefaultTypeInternal _CMsgSteamLearn_BatchOperation_Response_default_instance_;
class CMsgSteamLearn_CacheData_Request;
struct CMsgSteamLearn_CacheData_RequestDefaultTypeInternal;
extern CMsgSteamLearn_CacheData_RequestDefaultTypeInternal _CMsgSteamLearn_CacheData_Request_default_instance_;
class CMsgSteamLearn_CacheData_Response;
struct CMsgSteamLearn_CacheData_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_CacheData_ResponseDefaultTypeInternal _CMsgSteamLearn_CacheData_Response_default_instance_;
class CMsgSteamLearn_GetHMACKeys_Request;
struct CMsgSteamLearn_GetHMACKeys_RequestDefaultTypeInternal;
extern CMsgSteamLearn_GetHMACKeys_RequestDefaultTypeInternal _CMsgSteamLearn_GetHMACKeys_Request_default_instance_;
class CMsgSteamLearn_GetHMACKeys_Response;
struct CMsgSteamLearn_GetHMACKeys_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_GetHMACKeys_ResponseDefaultTypeInternal _CMsgSteamLearn_GetHMACKeys_Response_default_instance_;
class CMsgSteamLearn_InferenceBackend_Response;
struct CMsgSteamLearn_InferenceBackend_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_InferenceBackend_ResponseDefaultTypeInternal _CMsgSteamLearn_InferenceBackend_Response_default_instance_;
class CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput;
struct CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutputDefaultTypeInternal;
extern CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutputDefaultTypeInternal _CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput_default_instance_;
class CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput;
struct CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutputDefaultTypeInternal;
extern CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutputDefaultTypeInternal _CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput_default_instance_;
class CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput;
struct CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutputDefaultTypeInternal;
extern CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutputDefaultTypeInternal _CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput_default_instance_;
class CMsgSteamLearn_InferenceBackend_Response_Output;
struct CMsgSteamLearn_InferenceBackend_Response_OutputDefaultTypeInternal;
extern CMsgSteamLearn_InferenceBackend_Response_OutputDefaultTypeInternal _CMsgSteamLearn_InferenceBackend_Response_Output_default_instance_;
class CMsgSteamLearn_Inference_Request;
struct CMsgSteamLearn_Inference_RequestDefaultTypeInternal;
extern CMsgSteamLearn_Inference_RequestDefaultTypeInternal _CMsgSteamLearn_Inference_Request_default_instance_;
class CMsgSteamLearn_Inference_Response;
struct CMsgSteamLearn_Inference_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_Inference_ResponseDefaultTypeInternal _CMsgSteamLearn_Inference_Response_default_instance_;
class CMsgSteamLearn_RegisterDataSource_Request;
struct CMsgSteamLearn_RegisterDataSource_RequestDefaultTypeInternal;
extern CMsgSteamLearn_RegisterDataSource_RequestDefaultTypeInternal _CMsgSteamLearn_RegisterDataSource_Request_default_instance_;
class CMsgSteamLearn_RegisterDataSource_Response;
struct CMsgSteamLearn_RegisterDataSource_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_RegisterDataSource_ResponseDefaultTypeInternal _CMsgSteamLearn_RegisterDataSource_Response_default_instance_;
class CMsgSteamLearn_SnapshotProject_Request;
struct CMsgSteamLearn_SnapshotProject_RequestDefaultTypeInternal;
extern CMsgSteamLearn_SnapshotProject_RequestDefaultTypeInternal _CMsgSteamLearn_SnapshotProject_Request_default_instance_;
class CMsgSteamLearn_SnapshotProject_Response;
struct CMsgSteamLearn_SnapshotProject_ResponseDefaultTypeInternal;
extern CMsgSteamLearn_SnapshotProject_ResponseDefaultTypeInternal _CMsgSteamLearn_SnapshotProject_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgSteamLearnData* Arena::CreateMaybeMessage<::CMsgSteamLearnData>(Arena*);
template<> ::CMsgSteamLearnDataElement* Arena::CreateMaybeMessage<::CMsgSteamLearnDataElement>(Arena*);
template<> ::CMsgSteamLearnDataList* Arena::CreateMaybeMessage<::CMsgSteamLearnDataList>(Arena*);
template<> ::CMsgSteamLearnDataObject* Arena::CreateMaybeMessage<::CMsgSteamLearnDataObject>(Arena*);
template<> ::CMsgSteamLearnDataSource* Arena::CreateMaybeMessage<::CMsgSteamLearnDataSource>(Arena*);
template<> ::CMsgSteamLearnDataSourceDescElement* Arena::CreateMaybeMessage<::CMsgSteamLearnDataSourceDescElement>(Arena*);
template<> ::CMsgSteamLearnDataSourceDescObject* Arena::CreateMaybeMessage<::CMsgSteamLearnDataSourceDescObject>(Arena*);
template<> ::CMsgSteamLearnHMACKeys* Arena::CreateMaybeMessage<::CMsgSteamLearnHMACKeys>(Arena*);
template<> ::CMsgSteamLearnHMACKeys_CacheDataKeys* Arena::CreateMaybeMessage<::CMsgSteamLearnHMACKeys_CacheDataKeys>(Arena*);
template<> ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* Arena::CreateMaybeMessage<::CMsgSteamLearnHMACKeys_SnapshotProjectKeys>(Arena*);
template<> ::CMsgSteamLearn_AccessData* Arena::CreateMaybeMessage<::CMsgSteamLearn_AccessData>(Arena*);
template<> ::CMsgSteamLearn_BatchOperation_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_BatchOperation_Request>(Arena*);
template<> ::CMsgSteamLearn_BatchOperation_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_BatchOperation_Response>(Arena*);
template<> ::CMsgSteamLearn_CacheData_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_CacheData_Request>(Arena*);
template<> ::CMsgSteamLearn_CacheData_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_CacheData_Response>(Arena*);
template<> ::CMsgSteamLearn_GetHMACKeys_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_GetHMACKeys_Request>(Arena*);
template<> ::CMsgSteamLearn_GetHMACKeys_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_GetHMACKeys_Response>(Arena*);
template<> ::CMsgSteamLearn_InferenceBackend_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response>(Arena*);
template<> ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* Arena::CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput>(Arena*);
template<> ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* Arena::CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput>(Arena*);
template<> ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* Arena::CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput>(Arena*);
template<> ::CMsgSteamLearn_InferenceBackend_Response_Output* Arena::CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response_Output>(Arena*);
template<> ::CMsgSteamLearn_Inference_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_Inference_Request>(Arena*);
template<> ::CMsgSteamLearn_Inference_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_Inference_Response>(Arena*);
template<> ::CMsgSteamLearn_RegisterDataSource_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_RegisterDataSource_Request>(Arena*);
template<> ::CMsgSteamLearn_RegisterDataSource_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_RegisterDataSource_Response>(Arena*);
template<> ::CMsgSteamLearn_SnapshotProject_Request* Arena::CreateMaybeMessage<::CMsgSteamLearn_SnapshotProject_Request>(Arena*);
template<> ::CMsgSteamLearn_SnapshotProject_Response* Arena::CreateMaybeMessage<::CMsgSteamLearn_SnapshotProject_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ESteamLearnDataType : int {
  STEAMLEARN_DATATYPE_INVALID = 0,
  STEAMLEARN_DATATYPE_INT32 = 1,
  STEAMLEARN_DATATYPE_FLOAT32 = 2,
  STEAMLEARN_DATATYPE_BOOL = 3,
  STEAMLEARN_DATATYPE_STRING = 4,
  STEAMLEARN_DATATYPE_OBJECT = 5
};
bool ESteamLearnDataType_IsValid(int value);
constexpr ESteamLearnDataType ESteamLearnDataType_MIN = STEAMLEARN_DATATYPE_INVALID;
constexpr ESteamLearnDataType ESteamLearnDataType_MAX = STEAMLEARN_DATATYPE_OBJECT;
constexpr int ESteamLearnDataType_ARRAYSIZE = ESteamLearnDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamLearnDataType_descriptor();
template<typename T>
inline const std::string& ESteamLearnDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamLearnDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamLearnDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamLearnDataType_descriptor(), enum_t_value);
}
inline bool ESteamLearnDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamLearnDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamLearnDataType>(
    ESteamLearnDataType_descriptor(), name, value);
}
enum ESteammLearnRegisterDataSourceResult : int {
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR = 0,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED = 1,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND = 2,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC = 3,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME = 4,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION = 5,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED = 6,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID = 7,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN = 8,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP = 9,
  STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED = 10
};
bool ESteammLearnRegisterDataSourceResult_IsValid(int value);
constexpr ESteammLearnRegisterDataSourceResult ESteammLearnRegisterDataSourceResult_MIN = STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR;
constexpr ESteammLearnRegisterDataSourceResult ESteammLearnRegisterDataSourceResult_MAX = STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED;
constexpr int ESteammLearnRegisterDataSourceResult_ARRAYSIZE = ESteammLearnRegisterDataSourceResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteammLearnRegisterDataSourceResult_descriptor();
template<typename T>
inline const std::string& ESteammLearnRegisterDataSourceResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteammLearnRegisterDataSourceResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteammLearnRegisterDataSourceResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteammLearnRegisterDataSourceResult_descriptor(), enum_t_value);
}
inline bool ESteammLearnRegisterDataSourceResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteammLearnRegisterDataSourceResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteammLearnRegisterDataSourceResult>(
    ESteammLearnRegisterDataSourceResult_descriptor(), name, value);
}
enum ESteamLearnCacheDataResult : int {
  STEAMLEARN_CACHE_DATA_ERROR = 0,
  STEAMLEARN_CACHE_DATA_SUCCESS = 1,
  STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE = 2,
  STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE = 3,
  STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS = 4,
  STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN = 5,
  STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP = 6,
  STEAMLEARN_CACHE_DATA_DISABLED = 7
};
bool ESteamLearnCacheDataResult_IsValid(int value);
constexpr ESteamLearnCacheDataResult ESteamLearnCacheDataResult_MIN = STEAMLEARN_CACHE_DATA_ERROR;
constexpr ESteamLearnCacheDataResult ESteamLearnCacheDataResult_MAX = STEAMLEARN_CACHE_DATA_DISABLED;
constexpr int ESteamLearnCacheDataResult_ARRAYSIZE = ESteamLearnCacheDataResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamLearnCacheDataResult_descriptor();
template<typename T>
inline const std::string& ESteamLearnCacheDataResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamLearnCacheDataResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamLearnCacheDataResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamLearnCacheDataResult_descriptor(), enum_t_value);
}
inline bool ESteamLearnCacheDataResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamLearnCacheDataResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamLearnCacheDataResult>(
    ESteamLearnCacheDataResult_descriptor(), name, value);
}
enum ESteamLearnSnapshotProjectResult : int {
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR = 0,
  STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED = 1,
  STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED = 2,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID = 3,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE = 4,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY = 5,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION = 6,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG = 7,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN = 8,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP = 9,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR = 10,
  STEAMLEARN_SNAPSHOT_PROJECT_DISABLED = 11,
  STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION = 12
};
bool ESteamLearnSnapshotProjectResult_IsValid(int value);
constexpr ESteamLearnSnapshotProjectResult ESteamLearnSnapshotProjectResult_MIN = STEAMLEARN_SNAPSHOT_PROJECT_ERROR;
constexpr ESteamLearnSnapshotProjectResult ESteamLearnSnapshotProjectResult_MAX = STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION;
constexpr int ESteamLearnSnapshotProjectResult_ARRAYSIZE = ESteamLearnSnapshotProjectResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamLearnSnapshotProjectResult_descriptor();
template<typename T>
inline const std::string& ESteamLearnSnapshotProjectResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamLearnSnapshotProjectResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamLearnSnapshotProjectResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamLearnSnapshotProjectResult_descriptor(), enum_t_value);
}
inline bool ESteamLearnSnapshotProjectResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamLearnSnapshotProjectResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamLearnSnapshotProjectResult>(
    ESteamLearnSnapshotProjectResult_descriptor(), name, value);
}
enum ESteamLearnGetHMACKeysResult : int {
  STEAMLEARN_GET_HMAC_KEYS_SUCCESS = 0
};
bool ESteamLearnGetHMACKeysResult_IsValid(int value);
constexpr ESteamLearnGetHMACKeysResult ESteamLearnGetHMACKeysResult_MIN = STEAMLEARN_GET_HMAC_KEYS_SUCCESS;
constexpr ESteamLearnGetHMACKeysResult ESteamLearnGetHMACKeysResult_MAX = STEAMLEARN_GET_HMAC_KEYS_SUCCESS;
constexpr int ESteamLearnGetHMACKeysResult_ARRAYSIZE = ESteamLearnGetHMACKeysResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamLearnGetHMACKeysResult_descriptor();
template<typename T>
inline const std::string& ESteamLearnGetHMACKeysResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamLearnGetHMACKeysResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamLearnGetHMACKeysResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamLearnGetHMACKeysResult_descriptor(), enum_t_value);
}
inline bool ESteamLearnGetHMACKeysResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamLearnGetHMACKeysResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamLearnGetHMACKeysResult>(
    ESteamLearnGetHMACKeysResult_descriptor(), name, value);
}
enum ESteamLearnInferenceResult : int {
  STEAMLEARN_INFERENCE_ERROR = 0,
  STEAMLEARN_INFERENCE_SUCCESS = 1,
  STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID = 2,
  STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA = 3,
  STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG = 4,
  STEAMLEARN_INFERENCE_ERROR_FORBIDDEN = 5,
  STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP = 6,
  STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION = 7,
  STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND = 8
};
bool ESteamLearnInferenceResult_IsValid(int value);
constexpr ESteamLearnInferenceResult ESteamLearnInferenceResult_MIN = STEAMLEARN_INFERENCE_ERROR;
constexpr ESteamLearnInferenceResult ESteamLearnInferenceResult_MAX = STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND;
constexpr int ESteamLearnInferenceResult_ARRAYSIZE = ESteamLearnInferenceResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamLearnInferenceResult_descriptor();
template<typename T>
inline const std::string& ESteamLearnInferenceResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamLearnInferenceResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamLearnInferenceResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamLearnInferenceResult_descriptor(), enum_t_value);
}
inline bool ESteamLearnInferenceResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamLearnInferenceResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamLearnInferenceResult>(
    ESteamLearnInferenceResult_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamLearnDataSourceDescObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataSourceDescObject) */ {
 public:
  inline CMsgSteamLearnDataSourceDescObject() : CMsgSteamLearnDataSourceDescObject(nullptr) {}
  ~CMsgSteamLearnDataSourceDescObject() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataSourceDescObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataSourceDescObject(const CMsgSteamLearnDataSourceDescObject& from);
  CMsgSteamLearnDataSourceDescObject(CMsgSteamLearnDataSourceDescObject&& from) noexcept
    : CMsgSteamLearnDataSourceDescObject() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataSourceDescObject& operator=(const CMsgSteamLearnDataSourceDescObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataSourceDescObject& operator=(CMsgSteamLearnDataSourceDescObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataSourceDescObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataSourceDescObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataSourceDescObject*>(
               &_CMsgSteamLearnDataSourceDescObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgSteamLearnDataSourceDescObject& a, CMsgSteamLearnDataSourceDescObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataSourceDescObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataSourceDescObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataSourceDescObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataSourceDescObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataSourceDescObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataSourceDescObject& from) {
    CMsgSteamLearnDataSourceDescObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataSourceDescObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataSourceDescObject";
  }
  protected:
  explicit CMsgSteamLearnDataSourceDescObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .CMsgSteamLearnDataSourceDescElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::CMsgSteamLearnDataSourceDescElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataSourceDescElement >*
      mutable_elements();
  private:
  const ::CMsgSteamLearnDataSourceDescElement& _internal_elements(int index) const;
  ::CMsgSteamLearnDataSourceDescElement* _internal_add_elements();
  public:
  const ::CMsgSteamLearnDataSourceDescElement& elements(int index) const;
  ::CMsgSteamLearnDataSourceDescElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataSourceDescElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataSourceDescObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataSourceDescElement > elements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnDataSourceDescElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataSourceDescElement) */ {
 public:
  inline CMsgSteamLearnDataSourceDescElement() : CMsgSteamLearnDataSourceDescElement(nullptr) {}
  ~CMsgSteamLearnDataSourceDescElement() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataSourceDescElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataSourceDescElement(const CMsgSteamLearnDataSourceDescElement& from);
  CMsgSteamLearnDataSourceDescElement(CMsgSteamLearnDataSourceDescElement&& from) noexcept
    : CMsgSteamLearnDataSourceDescElement() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataSourceDescElement& operator=(const CMsgSteamLearnDataSourceDescElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataSourceDescElement& operator=(CMsgSteamLearnDataSourceDescElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataSourceDescElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataSourceDescElement* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataSourceDescElement*>(
               &_CMsgSteamLearnDataSourceDescElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgSteamLearnDataSourceDescElement& a, CMsgSteamLearnDataSourceDescElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataSourceDescElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataSourceDescElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataSourceDescElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataSourceDescElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataSourceDescElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataSourceDescElement& from) {
    CMsgSteamLearnDataSourceDescElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataSourceDescElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataSourceDescElement";
  }
  protected:
  explicit CMsgSteamLearnDataSourceDescElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kObjectFieldNumber = 3,
    kDataTypeFieldNumber = 2,
    kCountFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .CMsgSteamLearnDataSourceDescObject object = 3;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::CMsgSteamLearnDataSourceDescObject& object() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataSourceDescObject* release_object();
  ::CMsgSteamLearnDataSourceDescObject* mutable_object();
  void set_allocated_object(::CMsgSteamLearnDataSourceDescObject* object);
  private:
  const ::CMsgSteamLearnDataSourceDescObject& _internal_object() const;
  ::CMsgSteamLearnDataSourceDescObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::CMsgSteamLearnDataSourceDescObject* object);
  ::CMsgSteamLearnDataSourceDescObject* unsafe_arena_release_object();

  // optional .ESteamLearnDataType data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::ESteamLearnDataType data_type() const;
  void set_data_type(::ESteamLearnDataType value);
  private:
  ::ESteamLearnDataType _internal_data_type() const;
  void _internal_set_data_type(::ESteamLearnDataType value);
  public:

  // optional uint32 count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataSourceDescElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::CMsgSteamLearnDataSourceDescObject* object_;
    int data_type_;
    uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnDataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataSource) */ {
 public:
  inline CMsgSteamLearnDataSource() : CMsgSteamLearnDataSource(nullptr) {}
  ~CMsgSteamLearnDataSource() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataSource(const CMsgSteamLearnDataSource& from);
  CMsgSteamLearnDataSource(CMsgSteamLearnDataSource&& from) noexcept
    : CMsgSteamLearnDataSource() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataSource& operator=(const CMsgSteamLearnDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataSource& operator=(CMsgSteamLearnDataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataSource* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataSource*>(
               &_CMsgSteamLearnDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgSteamLearnDataSource& a, CMsgSteamLearnDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataSource& from) {
    CMsgSteamLearnDataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataSource";
  }
  protected:
  explicit CMsgSteamLearnDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSourceDescriptionFieldNumber = 4,
    kStructureFieldNumber = 5,
    kIdFieldNumber = 1,
    kVersionFieldNumber = 3,
    kStructureCrcFieldNumber = 6,
    kCacheDurationSecondsFieldNumber = 7,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string source_description = 4;
  bool has_source_description() const;
  private:
  bool _internal_has_source_description() const;
  public:
  void clear_source_description();
  const std::string& source_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_description();
  PROTOBUF_NODISCARD std::string* release_source_description();
  void set_allocated_source_description(std::string* source_description);
  private:
  const std::string& _internal_source_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_description(const std::string& value);
  std::string* _internal_mutable_source_description();
  public:

  // optional .CMsgSteamLearnDataSourceDescObject structure = 5;
  bool has_structure() const;
  private:
  bool _internal_has_structure() const;
  public:
  void clear_structure();
  const ::CMsgSteamLearnDataSourceDescObject& structure() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataSourceDescObject* release_structure();
  ::CMsgSteamLearnDataSourceDescObject* mutable_structure();
  void set_allocated_structure(::CMsgSteamLearnDataSourceDescObject* structure);
  private:
  const ::CMsgSteamLearnDataSourceDescObject& _internal_structure() const;
  ::CMsgSteamLearnDataSourceDescObject* _internal_mutable_structure();
  public:
  void unsafe_arena_set_allocated_structure(
      ::CMsgSteamLearnDataSourceDescObject* structure);
  ::CMsgSteamLearnDataSourceDescObject* unsafe_arena_release_structure();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint32 structure_crc = 6;
  bool has_structure_crc() const;
  private:
  bool _internal_has_structure_crc() const;
  public:
  void clear_structure_crc();
  uint32_t structure_crc() const;
  void set_structure_crc(uint32_t value);
  private:
  uint32_t _internal_structure_crc() const;
  void _internal_set_structure_crc(uint32_t value);
  public:

  // optional uint32 cache_duration_seconds = 7;
  bool has_cache_duration_seconds() const;
  private:
  bool _internal_has_cache_duration_seconds() const;
  public:
  void clear_cache_duration_seconds();
  uint32_t cache_duration_seconds() const;
  void set_cache_duration_seconds(uint32_t value);
  private:
  uint32_t _internal_cache_duration_seconds() const;
  void _internal_set_cache_duration_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_description_;
    ::CMsgSteamLearnDataSourceDescObject* structure_;
    uint32_t id_;
    uint32_t version_;
    uint32_t structure_crc_;
    uint32_t cache_duration_seconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnDataObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataObject) */ {
 public:
  inline CMsgSteamLearnDataObject() : CMsgSteamLearnDataObject(nullptr) {}
  ~CMsgSteamLearnDataObject() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataObject(const CMsgSteamLearnDataObject& from);
  CMsgSteamLearnDataObject(CMsgSteamLearnDataObject&& from) noexcept
    : CMsgSteamLearnDataObject() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataObject& operator=(const CMsgSteamLearnDataObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataObject& operator=(CMsgSteamLearnDataObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataObject*>(
               &_CMsgSteamLearnDataObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgSteamLearnDataObject& a, CMsgSteamLearnDataObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataObject& from) {
    CMsgSteamLearnDataObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataObject";
  }
  protected:
  explicit CMsgSteamLearnDataObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .CMsgSteamLearnDataElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::CMsgSteamLearnDataElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataElement >*
      mutable_elements();
  private:
  const ::CMsgSteamLearnDataElement& _internal_elements(int index) const;
  ::CMsgSteamLearnDataElement* _internal_add_elements();
  public:
  const ::CMsgSteamLearnDataElement& elements(int index) const;
  ::CMsgSteamLearnDataElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataElement > elements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnDataElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataElement) */ {
 public:
  inline CMsgSteamLearnDataElement() : CMsgSteamLearnDataElement(nullptr) {}
  ~CMsgSteamLearnDataElement() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataElement(const CMsgSteamLearnDataElement& from);
  CMsgSteamLearnDataElement(CMsgSteamLearnDataElement&& from) noexcept
    : CMsgSteamLearnDataElement() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataElement& operator=(const CMsgSteamLearnDataElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataElement& operator=(CMsgSteamLearnDataElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataElement* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataElement*>(
               &_CMsgSteamLearnDataElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgSteamLearnDataElement& a, CMsgSteamLearnDataElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataElement& from) {
    CMsgSteamLearnDataElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataElement";
  }
  protected:
  explicit CMsgSteamLearnDataElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataInt32SFieldNumber = 20,
    kDataFloatsFieldNumber = 21,
    kDataBoolsFieldNumber = 22,
    kDataStringsFieldNumber = 23,
    kDataObjectsFieldNumber = 24,
    kNameFieldNumber = 1,
  };
  // repeated int32 data_int32s = 20;
  int data_int32s_size() const;
  private:
  int _internal_data_int32s_size() const;
  public:
  void clear_data_int32s();
  private:
  int32_t _internal_data_int32s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data_int32s() const;
  void _internal_add_data_int32s(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data_int32s();
  public:
  int32_t data_int32s(int index) const;
  void set_data_int32s(int index, int32_t value);
  void add_data_int32s(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data_int32s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data_int32s();

  // repeated float data_floats = 21;
  int data_floats_size() const;
  private:
  int _internal_data_floats_size() const;
  public:
  void clear_data_floats();
  private:
  float _internal_data_floats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_floats() const;
  void _internal_add_data_floats(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_floats();
  public:
  float data_floats(int index) const;
  void set_data_floats(int index, float value);
  void add_data_floats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_floats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_floats();

  // repeated bool data_bools = 22;
  int data_bools_size() const;
  private:
  int _internal_data_bools_size() const;
  public:
  void clear_data_bools();
  private:
  bool _internal_data_bools(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_data_bools() const;
  void _internal_add_data_bools(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_data_bools();
  public:
  bool data_bools(int index) const;
  void set_data_bools(int index, bool value);
  void add_data_bools(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      data_bools() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_data_bools();

  // repeated string data_strings = 23;
  int data_strings_size() const;
  private:
  int _internal_data_strings_size() const;
  public:
  void clear_data_strings();
  const std::string& data_strings(int index) const;
  std::string* mutable_data_strings(int index);
  void set_data_strings(int index, const std::string& value);
  void set_data_strings(int index, std::string&& value);
  void set_data_strings(int index, const char* value);
  void set_data_strings(int index, const char* value, size_t size);
  std::string* add_data_strings();
  void add_data_strings(const std::string& value);
  void add_data_strings(std::string&& value);
  void add_data_strings(const char* value);
  void add_data_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_strings();
  private:
  const std::string& _internal_data_strings(int index) const;
  std::string* _internal_add_data_strings();
  public:

  // repeated .CMsgSteamLearnDataObject data_objects = 24;
  int data_objects_size() const;
  private:
  int _internal_data_objects_size() const;
  public:
  void clear_data_objects();
  ::CMsgSteamLearnDataObject* mutable_data_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataObject >*
      mutable_data_objects();
  private:
  const ::CMsgSteamLearnDataObject& _internal_data_objects(int index) const;
  ::CMsgSteamLearnDataObject* _internal_add_data_objects();
  public:
  const ::CMsgSteamLearnDataObject& data_objects(int index) const;
  ::CMsgSteamLearnDataObject* add_data_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataObject >&
      data_objects() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_int32s_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_floats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > data_bools_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_strings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataObject > data_objects_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnData) */ {
 public:
  inline CMsgSteamLearnData() : CMsgSteamLearnData(nullptr) {}
  ~CMsgSteamLearnData() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnData(const CMsgSteamLearnData& from);
  CMsgSteamLearnData(CMsgSteamLearnData&& from) noexcept
    : CMsgSteamLearnData() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnData& operator=(const CMsgSteamLearnData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnData& operator=(CMsgSteamLearnData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnData* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnData*>(
               &_CMsgSteamLearnData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgSteamLearnData& a, CMsgSteamLearnData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnData& from) {
    CMsgSteamLearnData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnData";
  }
  protected:
  explicit CMsgSteamLearnData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kDataObjectFieldNumber = 3,
    kDataSourceIdFieldNumber = 1,
  };
  // repeated uint64 keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  uint64_t _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_keys() const;
  void _internal_add_keys(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_keys();
  public:
  uint64_t keys(int index) const;
  void set_keys(int index, uint64_t value);
  void add_keys(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_keys();

  // optional .CMsgSteamLearnDataObject data_object = 3;
  bool has_data_object() const;
  private:
  bool _internal_has_data_object() const;
  public:
  void clear_data_object();
  const ::CMsgSteamLearnDataObject& data_object() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataObject* release_data_object();
  ::CMsgSteamLearnDataObject* mutable_data_object();
  void set_allocated_data_object(::CMsgSteamLearnDataObject* data_object);
  private:
  const ::CMsgSteamLearnDataObject& _internal_data_object() const;
  ::CMsgSteamLearnDataObject* _internal_mutable_data_object();
  public:
  void unsafe_arena_set_allocated_data_object(
      ::CMsgSteamLearnDataObject* data_object);
  ::CMsgSteamLearnDataObject* unsafe_arena_release_data_object();

  // optional uint32 data_source_id = 1;
  bool has_data_source_id() const;
  private:
  bool _internal_has_data_source_id() const;
  public:
  void clear_data_source_id();
  uint32_t data_source_id() const;
  void set_data_source_id(uint32_t value);
  private:
  uint32_t _internal_data_source_id() const;
  void _internal_set_data_source_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > keys_;
    ::CMsgSteamLearnDataObject* data_object_;
    uint32_t data_source_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnDataList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnDataList) */ {
 public:
  inline CMsgSteamLearnDataList() : CMsgSteamLearnDataList(nullptr) {}
  ~CMsgSteamLearnDataList() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnDataList(const CMsgSteamLearnDataList& from);
  CMsgSteamLearnDataList(CMsgSteamLearnDataList&& from) noexcept
    : CMsgSteamLearnDataList() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnDataList& operator=(const CMsgSteamLearnDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnDataList& operator=(CMsgSteamLearnDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnDataList* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnDataList*>(
               &_CMsgSteamLearnDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgSteamLearnDataList& a, CMsgSteamLearnDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnDataList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnDataList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnDataList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnDataList& from) {
    CMsgSteamLearnDataList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnDataList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnDataList";
  }
  protected:
  explicit CMsgSteamLearnDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .CMsgSteamLearnData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::CMsgSteamLearnData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >*
      mutable_data();
  private:
  const ::CMsgSteamLearnData& _internal_data(int index) const;
  ::CMsgSteamLearnData* _internal_add_data();
  public:
  const ::CMsgSteamLearnData& data(int index) const;
  ::CMsgSteamLearnData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >&
      data() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_AccessData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_AccessData) */ {
 public:
  inline CMsgSteamLearn_AccessData() : CMsgSteamLearn_AccessData(nullptr) {}
  ~CMsgSteamLearn_AccessData() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_AccessData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_AccessData(const CMsgSteamLearn_AccessData& from);
  CMsgSteamLearn_AccessData(CMsgSteamLearn_AccessData&& from) noexcept
    : CMsgSteamLearn_AccessData() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_AccessData& operator=(const CMsgSteamLearn_AccessData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_AccessData& operator=(CMsgSteamLearn_AccessData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_AccessData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_AccessData* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_AccessData*>(
               &_CMsgSteamLearn_AccessData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgSteamLearn_AccessData& a, CMsgSteamLearn_AccessData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_AccessData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_AccessData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_AccessData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_AccessData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_AccessData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_AccessData& from) {
    CMsgSteamLearn_AccessData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_AccessData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_AccessData";
  }
  protected:
  explicit CMsgSteamLearn_AccessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublisherIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kRandomValueFieldNumber = 3,
  };
  // optional uint32 publisher_id = 1;
  bool has_publisher_id() const;
  private:
  bool _internal_has_publisher_id() const;
  public:
  void clear_publisher_id();
  uint32_t publisher_id() const;
  void set_publisher_id(uint32_t value);
  private:
  uint32_t _internal_publisher_id() const;
  void _internal_set_publisher_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint64 random_value = 3;
  bool has_random_value() const;
  private:
  bool _internal_has_random_value() const;
  public:
  void clear_random_value();
  uint64_t random_value() const;
  void set_random_value(uint64_t value);
  private:
  uint64_t _internal_random_value() const;
  void _internal_set_random_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_AccessData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t publisher_id_;
    uint32_t timestamp_;
    uint64_t random_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_RegisterDataSource_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_RegisterDataSource_Request) */ {
 public:
  inline CMsgSteamLearn_RegisterDataSource_Request() : CMsgSteamLearn_RegisterDataSource_Request(nullptr) {}
  ~CMsgSteamLearn_RegisterDataSource_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_RegisterDataSource_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_RegisterDataSource_Request(const CMsgSteamLearn_RegisterDataSource_Request& from);
  CMsgSteamLearn_RegisterDataSource_Request(CMsgSteamLearn_RegisterDataSource_Request&& from) noexcept
    : CMsgSteamLearn_RegisterDataSource_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_RegisterDataSource_Request& operator=(const CMsgSteamLearn_RegisterDataSource_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_RegisterDataSource_Request& operator=(CMsgSteamLearn_RegisterDataSource_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_RegisterDataSource_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_RegisterDataSource_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_RegisterDataSource_Request*>(
               &_CMsgSteamLearn_RegisterDataSource_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgSteamLearn_RegisterDataSource_Request& a, CMsgSteamLearn_RegisterDataSource_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_RegisterDataSource_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_RegisterDataSource_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_RegisterDataSource_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_RegisterDataSource_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_RegisterDataSource_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_RegisterDataSource_Request& from) {
    CMsgSteamLearn_RegisterDataSource_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_RegisterDataSource_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_RegisterDataSource_Request";
  }
  protected:
  explicit CMsgSteamLearn_RegisterDataSource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kAccessDataFieldNumber = 2,
    kDataSourceFieldNumber = 3,
  };
  // optional string access_token = 1;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional .CMsgSteamLearn_AccessData access_data = 2;
  bool has_access_data() const;
  private:
  bool _internal_has_access_data() const;
  public:
  void clear_access_data();
  const ::CMsgSteamLearn_AccessData& access_data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_AccessData* release_access_data();
  ::CMsgSteamLearn_AccessData* mutable_access_data();
  void set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data);
  private:
  const ::CMsgSteamLearn_AccessData& _internal_access_data() const;
  ::CMsgSteamLearn_AccessData* _internal_mutable_access_data();
  public:
  void unsafe_arena_set_allocated_access_data(
      ::CMsgSteamLearn_AccessData* access_data);
  ::CMsgSteamLearn_AccessData* unsafe_arena_release_access_data();

  // optional .CMsgSteamLearnDataSource data_source = 3;
  bool has_data_source() const;
  private:
  bool _internal_has_data_source() const;
  public:
  void clear_data_source();
  const ::CMsgSteamLearnDataSource& data_source() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataSource* release_data_source();
  ::CMsgSteamLearnDataSource* mutable_data_source();
  void set_allocated_data_source(::CMsgSteamLearnDataSource* data_source);
  private:
  const ::CMsgSteamLearnDataSource& _internal_data_source() const;
  ::CMsgSteamLearnDataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::CMsgSteamLearnDataSource* data_source);
  ::CMsgSteamLearnDataSource* unsafe_arena_release_data_source();

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_RegisterDataSource_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::CMsgSteamLearn_AccessData* access_data_;
    ::CMsgSteamLearnDataSource* data_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_RegisterDataSource_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_RegisterDataSource_Response) */ {
 public:
  inline CMsgSteamLearn_RegisterDataSource_Response() : CMsgSteamLearn_RegisterDataSource_Response(nullptr) {}
  ~CMsgSteamLearn_RegisterDataSource_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_RegisterDataSource_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_RegisterDataSource_Response(const CMsgSteamLearn_RegisterDataSource_Response& from);
  CMsgSteamLearn_RegisterDataSource_Response(CMsgSteamLearn_RegisterDataSource_Response&& from) noexcept
    : CMsgSteamLearn_RegisterDataSource_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_RegisterDataSource_Response& operator=(const CMsgSteamLearn_RegisterDataSource_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_RegisterDataSource_Response& operator=(CMsgSteamLearn_RegisterDataSource_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_RegisterDataSource_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_RegisterDataSource_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_RegisterDataSource_Response*>(
               &_CMsgSteamLearn_RegisterDataSource_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgSteamLearn_RegisterDataSource_Response& a, CMsgSteamLearn_RegisterDataSource_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_RegisterDataSource_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_RegisterDataSource_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_RegisterDataSource_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_RegisterDataSource_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_RegisterDataSource_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_RegisterDataSource_Response& from) {
    CMsgSteamLearn_RegisterDataSource_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_RegisterDataSource_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_RegisterDataSource_Response";
  }
  protected:
  explicit CMsgSteamLearn_RegisterDataSource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .CMsgSteamLearnDataSource data_source = 2;
  bool has_data_source() const;
  private:
  bool _internal_has_data_source() const;
  public:
  void clear_data_source();
  const ::CMsgSteamLearnDataSource& data_source() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataSource* release_data_source();
  ::CMsgSteamLearnDataSource* mutable_data_source();
  void set_allocated_data_source(::CMsgSteamLearnDataSource* data_source);
  private:
  const ::CMsgSteamLearnDataSource& _internal_data_source() const;
  ::CMsgSteamLearnDataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::CMsgSteamLearnDataSource* data_source);
  ::CMsgSteamLearnDataSource* unsafe_arena_release_data_source();

  // optional .ESteammLearnRegisterDataSourceResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::ESteammLearnRegisterDataSourceResult result() const;
  void set_result(::ESteammLearnRegisterDataSourceResult value);
  private:
  ::ESteammLearnRegisterDataSourceResult _internal_result() const;
  void _internal_set_result(::ESteammLearnRegisterDataSourceResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_RegisterDataSource_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgSteamLearnDataSource* data_source_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_CacheData_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_CacheData_Request) */ {
 public:
  inline CMsgSteamLearn_CacheData_Request() : CMsgSteamLearn_CacheData_Request(nullptr) {}
  ~CMsgSteamLearn_CacheData_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_CacheData_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_CacheData_Request(const CMsgSteamLearn_CacheData_Request& from);
  CMsgSteamLearn_CacheData_Request(CMsgSteamLearn_CacheData_Request&& from) noexcept
    : CMsgSteamLearn_CacheData_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_CacheData_Request& operator=(const CMsgSteamLearn_CacheData_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_CacheData_Request& operator=(CMsgSteamLearn_CacheData_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_CacheData_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_CacheData_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_CacheData_Request*>(
               &_CMsgSteamLearn_CacheData_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgSteamLearn_CacheData_Request& a, CMsgSteamLearn_CacheData_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_CacheData_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_CacheData_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_CacheData_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_CacheData_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_CacheData_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_CacheData_Request& from) {
    CMsgSteamLearn_CacheData_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_CacheData_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_CacheData_Request";
  }
  protected:
  explicit CMsgSteamLearn_CacheData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kAccessDataFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // optional string access_token = 1;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional .CMsgSteamLearn_AccessData access_data = 2;
  bool has_access_data() const;
  private:
  bool _internal_has_access_data() const;
  public:
  void clear_access_data();
  const ::CMsgSteamLearn_AccessData& access_data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_AccessData* release_access_data();
  ::CMsgSteamLearn_AccessData* mutable_access_data();
  void set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data);
  private:
  const ::CMsgSteamLearn_AccessData& _internal_access_data() const;
  ::CMsgSteamLearn_AccessData* _internal_mutable_access_data();
  public:
  void unsafe_arena_set_allocated_access_data(
      ::CMsgSteamLearn_AccessData* access_data);
  ::CMsgSteamLearn_AccessData* unsafe_arena_release_access_data();

  // optional .CMsgSteamLearnData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgSteamLearnData& data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnData* release_data();
  ::CMsgSteamLearnData* mutable_data();
  void set_allocated_data(::CMsgSteamLearnData* data);
  private:
  const ::CMsgSteamLearnData& _internal_data() const;
  ::CMsgSteamLearnData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgSteamLearnData* data);
  ::CMsgSteamLearnData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_CacheData_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::CMsgSteamLearn_AccessData* access_data_;
    ::CMsgSteamLearnData* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_CacheData_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_CacheData_Response) */ {
 public:
  inline CMsgSteamLearn_CacheData_Response() : CMsgSteamLearn_CacheData_Response(nullptr) {}
  ~CMsgSteamLearn_CacheData_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_CacheData_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_CacheData_Response(const CMsgSteamLearn_CacheData_Response& from);
  CMsgSteamLearn_CacheData_Response(CMsgSteamLearn_CacheData_Response&& from) noexcept
    : CMsgSteamLearn_CacheData_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_CacheData_Response& operator=(const CMsgSteamLearn_CacheData_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_CacheData_Response& operator=(CMsgSteamLearn_CacheData_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_CacheData_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_CacheData_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_CacheData_Response*>(
               &_CMsgSteamLearn_CacheData_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgSteamLearn_CacheData_Response& a, CMsgSteamLearn_CacheData_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_CacheData_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_CacheData_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_CacheData_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_CacheData_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_CacheData_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_CacheData_Response& from) {
    CMsgSteamLearn_CacheData_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_CacheData_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_CacheData_Response";
  }
  protected:
  explicit CMsgSteamLearn_CacheData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDataResultFieldNumber = 1,
  };
  // optional .ESteamLearnCacheDataResult cache_data_result = 1;
  bool has_cache_data_result() const;
  private:
  bool _internal_has_cache_data_result() const;
  public:
  void clear_cache_data_result();
  ::ESteamLearnCacheDataResult cache_data_result() const;
  void set_cache_data_result(::ESteamLearnCacheDataResult value);
  private:
  ::ESteamLearnCacheDataResult _internal_cache_data_result() const;
  void _internal_set_cache_data_result(::ESteamLearnCacheDataResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_CacheData_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int cache_data_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_SnapshotProject_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_SnapshotProject_Request) */ {
 public:
  inline CMsgSteamLearn_SnapshotProject_Request() : CMsgSteamLearn_SnapshotProject_Request(nullptr) {}
  ~CMsgSteamLearn_SnapshotProject_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_SnapshotProject_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_SnapshotProject_Request(const CMsgSteamLearn_SnapshotProject_Request& from);
  CMsgSteamLearn_SnapshotProject_Request(CMsgSteamLearn_SnapshotProject_Request&& from) noexcept
    : CMsgSteamLearn_SnapshotProject_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_SnapshotProject_Request& operator=(const CMsgSteamLearn_SnapshotProject_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_SnapshotProject_Request& operator=(CMsgSteamLearn_SnapshotProject_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_SnapshotProject_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_SnapshotProject_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_SnapshotProject_Request*>(
               &_CMsgSteamLearn_SnapshotProject_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgSteamLearn_SnapshotProject_Request& a, CMsgSteamLearn_SnapshotProject_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_SnapshotProject_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_SnapshotProject_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_SnapshotProject_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_SnapshotProject_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_SnapshotProject_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_SnapshotProject_Request& from) {
    CMsgSteamLearn_SnapshotProject_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_SnapshotProject_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_SnapshotProject_Request";
  }
  protected:
  explicit CMsgSteamLearn_SnapshotProject_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kDataFieldNumber = 5,
    kAccessTokenFieldNumber = 1,
    kAccessDataFieldNumber = 2,
    kProjectIdFieldNumber = 3,
    kPendingDataLimitSecondsFieldNumber = 6,
    kPublishedVersionFieldNumber = 7,
  };
  // repeated uint64 keys = 4;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  uint64_t _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_keys() const;
  void _internal_add_keys(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_keys();
  public:
  uint64_t keys(int index) const;
  void set_keys(int index, uint64_t value);
  void add_keys(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_keys();

  // repeated .CMsgSteamLearnData data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::CMsgSteamLearnData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >*
      mutable_data();
  private:
  const ::CMsgSteamLearnData& _internal_data(int index) const;
  ::CMsgSteamLearnData* _internal_add_data();
  public:
  const ::CMsgSteamLearnData& data(int index) const;
  ::CMsgSteamLearnData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >&
      data() const;

  // optional string access_token = 1;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional .CMsgSteamLearn_AccessData access_data = 2;
  bool has_access_data() const;
  private:
  bool _internal_has_access_data() const;
  public:
  void clear_access_data();
  const ::CMsgSteamLearn_AccessData& access_data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_AccessData* release_access_data();
  ::CMsgSteamLearn_AccessData* mutable_access_data();
  void set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data);
  private:
  const ::CMsgSteamLearn_AccessData& _internal_access_data() const;
  ::CMsgSteamLearn_AccessData* _internal_mutable_access_data();
  public:
  void unsafe_arena_set_allocated_access_data(
      ::CMsgSteamLearn_AccessData* access_data);
  ::CMsgSteamLearn_AccessData* unsafe_arena_release_access_data();

  // optional uint32 project_id = 3;
  bool has_project_id() const;
  private:
  bool _internal_has_project_id() const;
  public:
  void clear_project_id();
  uint32_t project_id() const;
  void set_project_id(uint32_t value);
  private:
  uint32_t _internal_project_id() const;
  void _internal_set_project_id(uint32_t value);
  public:

  // optional uint32 pending_data_limit_seconds = 6;
  bool has_pending_data_limit_seconds() const;
  private:
  bool _internal_has_pending_data_limit_seconds() const;
  public:
  void clear_pending_data_limit_seconds();
  uint32_t pending_data_limit_seconds() const;
  void set_pending_data_limit_seconds(uint32_t value);
  private:
  uint32_t _internal_pending_data_limit_seconds() const;
  void _internal_set_pending_data_limit_seconds(uint32_t value);
  public:

  // optional uint32 published_version = 7;
  bool has_published_version() const;
  private:
  bool _internal_has_published_version() const;
  public:
  void clear_published_version();
  uint32_t published_version() const;
  void set_published_version(uint32_t value);
  private:
  uint32_t _internal_published_version() const;
  void _internal_set_published_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_SnapshotProject_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::CMsgSteamLearn_AccessData* access_data_;
    uint32_t project_id_;
    uint32_t pending_data_limit_seconds_;
    uint32_t published_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_SnapshotProject_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_SnapshotProject_Response) */ {
 public:
  inline CMsgSteamLearn_SnapshotProject_Response() : CMsgSteamLearn_SnapshotProject_Response(nullptr) {}
  ~CMsgSteamLearn_SnapshotProject_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_SnapshotProject_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_SnapshotProject_Response(const CMsgSteamLearn_SnapshotProject_Response& from);
  CMsgSteamLearn_SnapshotProject_Response(CMsgSteamLearn_SnapshotProject_Response&& from) noexcept
    : CMsgSteamLearn_SnapshotProject_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_SnapshotProject_Response& operator=(const CMsgSteamLearn_SnapshotProject_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_SnapshotProject_Response& operator=(CMsgSteamLearn_SnapshotProject_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_SnapshotProject_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_SnapshotProject_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_SnapshotProject_Response*>(
               &_CMsgSteamLearn_SnapshotProject_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgSteamLearn_SnapshotProject_Response& a, CMsgSteamLearn_SnapshotProject_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_SnapshotProject_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_SnapshotProject_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_SnapshotProject_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_SnapshotProject_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_SnapshotProject_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_SnapshotProject_Response& from) {
    CMsgSteamLearn_SnapshotProject_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_SnapshotProject_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_SnapshotProject_Response";
  }
  protected:
  explicit CMsgSteamLearn_SnapshotProject_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotResultFieldNumber = 1,
  };
  // optional .ESteamLearnSnapshotProjectResult snapshot_result = 1;
  bool has_snapshot_result() const;
  private:
  bool _internal_has_snapshot_result() const;
  public:
  void clear_snapshot_result();
  ::ESteamLearnSnapshotProjectResult snapshot_result() const;
  void set_snapshot_result(::ESteamLearnSnapshotProjectResult value);
  private:
  ::ESteamLearnSnapshotProjectResult _internal_snapshot_result() const;
  void _internal_set_snapshot_result(::ESteamLearnSnapshotProjectResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_SnapshotProject_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int snapshot_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_BatchOperation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_BatchOperation_Request) */ {
 public:
  inline CMsgSteamLearn_BatchOperation_Request() : CMsgSteamLearn_BatchOperation_Request(nullptr) {}
  ~CMsgSteamLearn_BatchOperation_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_BatchOperation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_BatchOperation_Request(const CMsgSteamLearn_BatchOperation_Request& from);
  CMsgSteamLearn_BatchOperation_Request(CMsgSteamLearn_BatchOperation_Request&& from) noexcept
    : CMsgSteamLearn_BatchOperation_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_BatchOperation_Request& operator=(const CMsgSteamLearn_BatchOperation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_BatchOperation_Request& operator=(CMsgSteamLearn_BatchOperation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_BatchOperation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_BatchOperation_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_BatchOperation_Request*>(
               &_CMsgSteamLearn_BatchOperation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgSteamLearn_BatchOperation_Request& a, CMsgSteamLearn_BatchOperation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_BatchOperation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_BatchOperation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_BatchOperation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_BatchOperation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_BatchOperation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_BatchOperation_Request& from) {
    CMsgSteamLearn_BatchOperation_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_BatchOperation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_BatchOperation_Request";
  }
  protected:
  explicit CMsgSteamLearn_BatchOperation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDataRequestsFieldNumber = 1,
    kSnapshotRequestsFieldNumber = 2,
  };
  // repeated .CMsgSteamLearn_CacheData_Request cache_data_requests = 1;
  int cache_data_requests_size() const;
  private:
  int _internal_cache_data_requests_size() const;
  public:
  void clear_cache_data_requests();
  ::CMsgSteamLearn_CacheData_Request* mutable_cache_data_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Request >*
      mutable_cache_data_requests();
  private:
  const ::CMsgSteamLearn_CacheData_Request& _internal_cache_data_requests(int index) const;
  ::CMsgSteamLearn_CacheData_Request* _internal_add_cache_data_requests();
  public:
  const ::CMsgSteamLearn_CacheData_Request& cache_data_requests(int index) const;
  ::CMsgSteamLearn_CacheData_Request* add_cache_data_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Request >&
      cache_data_requests() const;

  // repeated .CMsgSteamLearn_SnapshotProject_Request snapshot_requests = 2;
  int snapshot_requests_size() const;
  private:
  int _internal_snapshot_requests_size() const;
  public:
  void clear_snapshot_requests();
  ::CMsgSteamLearn_SnapshotProject_Request* mutable_snapshot_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Request >*
      mutable_snapshot_requests();
  private:
  const ::CMsgSteamLearn_SnapshotProject_Request& _internal_snapshot_requests(int index) const;
  ::CMsgSteamLearn_SnapshotProject_Request* _internal_add_snapshot_requests();
  public:
  const ::CMsgSteamLearn_SnapshotProject_Request& snapshot_requests(int index) const;
  ::CMsgSteamLearn_SnapshotProject_Request* add_snapshot_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Request >&
      snapshot_requests() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_BatchOperation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Request > cache_data_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Request > snapshot_requests_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_BatchOperation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_BatchOperation_Response) */ {
 public:
  inline CMsgSteamLearn_BatchOperation_Response() : CMsgSteamLearn_BatchOperation_Response(nullptr) {}
  ~CMsgSteamLearn_BatchOperation_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_BatchOperation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_BatchOperation_Response(const CMsgSteamLearn_BatchOperation_Response& from);
  CMsgSteamLearn_BatchOperation_Response(CMsgSteamLearn_BatchOperation_Response&& from) noexcept
    : CMsgSteamLearn_BatchOperation_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_BatchOperation_Response& operator=(const CMsgSteamLearn_BatchOperation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_BatchOperation_Response& operator=(CMsgSteamLearn_BatchOperation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_BatchOperation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_BatchOperation_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_BatchOperation_Response*>(
               &_CMsgSteamLearn_BatchOperation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgSteamLearn_BatchOperation_Response& a, CMsgSteamLearn_BatchOperation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_BatchOperation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_BatchOperation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_BatchOperation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_BatchOperation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_BatchOperation_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_BatchOperation_Response& from) {
    CMsgSteamLearn_BatchOperation_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_BatchOperation_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_BatchOperation_Response";
  }
  protected:
  explicit CMsgSteamLearn_BatchOperation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDataResponsesFieldNumber = 1,
    kSnapshotResponsesFieldNumber = 2,
  };
  // repeated .CMsgSteamLearn_CacheData_Response cache_data_responses = 1;
  int cache_data_responses_size() const;
  private:
  int _internal_cache_data_responses_size() const;
  public:
  void clear_cache_data_responses();
  ::CMsgSteamLearn_CacheData_Response* mutable_cache_data_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Response >*
      mutable_cache_data_responses();
  private:
  const ::CMsgSteamLearn_CacheData_Response& _internal_cache_data_responses(int index) const;
  ::CMsgSteamLearn_CacheData_Response* _internal_add_cache_data_responses();
  public:
  const ::CMsgSteamLearn_CacheData_Response& cache_data_responses(int index) const;
  ::CMsgSteamLearn_CacheData_Response* add_cache_data_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Response >&
      cache_data_responses() const;

  // repeated .CMsgSteamLearn_SnapshotProject_Response snapshot_responses = 2;
  int snapshot_responses_size() const;
  private:
  int _internal_snapshot_responses_size() const;
  public:
  void clear_snapshot_responses();
  ::CMsgSteamLearn_SnapshotProject_Response* mutable_snapshot_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Response >*
      mutable_snapshot_responses();
  private:
  const ::CMsgSteamLearn_SnapshotProject_Response& _internal_snapshot_responses(int index) const;
  ::CMsgSteamLearn_SnapshotProject_Response* _internal_add_snapshot_responses();
  public:
  const ::CMsgSteamLearn_SnapshotProject_Response& snapshot_responses(int index) const;
  ::CMsgSteamLearn_SnapshotProject_Response* add_snapshot_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Response >&
      snapshot_responses() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_BatchOperation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Response > cache_data_responses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Response > snapshot_responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnHMACKeys_CacheDataKeys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnHMACKeys.CacheDataKeys) */ {
 public:
  inline CMsgSteamLearnHMACKeys_CacheDataKeys() : CMsgSteamLearnHMACKeys_CacheDataKeys(nullptr) {}
  ~CMsgSteamLearnHMACKeys_CacheDataKeys() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnHMACKeys_CacheDataKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnHMACKeys_CacheDataKeys(const CMsgSteamLearnHMACKeys_CacheDataKeys& from);
  CMsgSteamLearnHMACKeys_CacheDataKeys(CMsgSteamLearnHMACKeys_CacheDataKeys&& from) noexcept
    : CMsgSteamLearnHMACKeys_CacheDataKeys() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnHMACKeys_CacheDataKeys& operator=(const CMsgSteamLearnHMACKeys_CacheDataKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnHMACKeys_CacheDataKeys& operator=(CMsgSteamLearnHMACKeys_CacheDataKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnHMACKeys_CacheDataKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnHMACKeys_CacheDataKeys* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnHMACKeys_CacheDataKeys*>(
               &_CMsgSteamLearnHMACKeys_CacheDataKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgSteamLearnHMACKeys_CacheDataKeys& a, CMsgSteamLearnHMACKeys_CacheDataKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnHMACKeys_CacheDataKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnHMACKeys_CacheDataKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnHMACKeys_CacheDataKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnHMACKeys_CacheDataKeys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnHMACKeys_CacheDataKeys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnHMACKeys_CacheDataKeys& from) {
    CMsgSteamLearnHMACKeys_CacheDataKeys::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnHMACKeys_CacheDataKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnHMACKeys.CacheDataKeys";
  }
  protected:
  explicit CMsgSteamLearnHMACKeys_CacheDataKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kDataSourceIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 data_source_id = 1;
  bool has_data_source_id() const;
  private:
  bool _internal_has_data_source_id() const;
  public:
  void clear_data_source_id();
  uint32_t data_source_id() const;
  void set_data_source_id(uint32_t value);
  private:
  uint32_t _internal_data_source_id() const;
  void _internal_set_data_source_id(uint32_t value);
  public:

  // optional uint32 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnHMACKeys.CacheDataKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint32_t data_source_id_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnHMACKeys_SnapshotProjectKeys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnHMACKeys.SnapshotProjectKeys) */ {
 public:
  inline CMsgSteamLearnHMACKeys_SnapshotProjectKeys() : CMsgSteamLearnHMACKeys_SnapshotProjectKeys(nullptr) {}
  ~CMsgSteamLearnHMACKeys_SnapshotProjectKeys() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnHMACKeys_SnapshotProjectKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnHMACKeys_SnapshotProjectKeys(const CMsgSteamLearnHMACKeys_SnapshotProjectKeys& from);
  CMsgSteamLearnHMACKeys_SnapshotProjectKeys(CMsgSteamLearnHMACKeys_SnapshotProjectKeys&& from) noexcept
    : CMsgSteamLearnHMACKeys_SnapshotProjectKeys() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnHMACKeys_SnapshotProjectKeys& operator=(const CMsgSteamLearnHMACKeys_SnapshotProjectKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnHMACKeys_SnapshotProjectKeys& operator=(CMsgSteamLearnHMACKeys_SnapshotProjectKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnHMACKeys_SnapshotProjectKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnHMACKeys_SnapshotProjectKeys* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnHMACKeys_SnapshotProjectKeys*>(
               &_CMsgSteamLearnHMACKeys_SnapshotProjectKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgSteamLearnHMACKeys_SnapshotProjectKeys& a, CMsgSteamLearnHMACKeys_SnapshotProjectKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnHMACKeys_SnapshotProjectKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnHMACKeys_SnapshotProjectKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnHMACKeys_SnapshotProjectKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnHMACKeys_SnapshotProjectKeys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnHMACKeys_SnapshotProjectKeys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnHMACKeys_SnapshotProjectKeys& from) {
    CMsgSteamLearnHMACKeys_SnapshotProjectKeys::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnHMACKeys_SnapshotProjectKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnHMACKeys.SnapshotProjectKeys";
  }
  protected:
  explicit CMsgSteamLearnHMACKeys_SnapshotProjectKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kProjectIdFieldNumber = 1,
    kPublishedVersionFieldNumber = 3,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 project_id = 1;
  bool has_project_id() const;
  private:
  bool _internal_has_project_id() const;
  public:
  void clear_project_id();
  uint32_t project_id() const;
  void set_project_id(uint32_t value);
  private:
  uint32_t _internal_project_id() const;
  void _internal_set_project_id(uint32_t value);
  public:

  // optional uint32 published_version = 3;
  bool has_published_version() const;
  private:
  bool _internal_has_published_version() const;
  public:
  void clear_published_version();
  uint32_t published_version() const;
  void set_published_version(uint32_t value);
  private:
  uint32_t _internal_published_version() const;
  void _internal_set_published_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnHMACKeys.SnapshotProjectKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint32_t project_id_;
    uint32_t published_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnHMACKeys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnHMACKeys) */ {
 public:
  inline CMsgSteamLearnHMACKeys() : CMsgSteamLearnHMACKeys(nullptr) {}
  ~CMsgSteamLearnHMACKeys() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnHMACKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnHMACKeys(const CMsgSteamLearnHMACKeys& from);
  CMsgSteamLearnHMACKeys(CMsgSteamLearnHMACKeys&& from) noexcept
    : CMsgSteamLearnHMACKeys() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnHMACKeys& operator=(const CMsgSteamLearnHMACKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnHMACKeys& operator=(CMsgSteamLearnHMACKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnHMACKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnHMACKeys* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnHMACKeys*>(
               &_CMsgSteamLearnHMACKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgSteamLearnHMACKeys& a, CMsgSteamLearnHMACKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnHMACKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnHMACKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnHMACKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnHMACKeys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnHMACKeys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnHMACKeys& from) {
    CMsgSteamLearnHMACKeys::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnHMACKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnHMACKeys";
  }
  protected:
  explicit CMsgSteamLearnHMACKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamLearnHMACKeys_CacheDataKeys CacheDataKeys;
  typedef CMsgSteamLearnHMACKeys_SnapshotProjectKeys SnapshotProjectKeys;

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDataKeysFieldNumber = 2,
    kSnapshotProjectKeysFieldNumber = 3,
    kRegisterDataSourceKeyFieldNumber = 1,
  };
  // repeated .CMsgSteamLearnHMACKeys.CacheDataKeys cache_data_keys = 2;
  int cache_data_keys_size() const;
  private:
  int _internal_cache_data_keys_size() const;
  public:
  void clear_cache_data_keys();
  ::CMsgSteamLearnHMACKeys_CacheDataKeys* mutable_cache_data_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_CacheDataKeys >*
      mutable_cache_data_keys();
  private:
  const ::CMsgSteamLearnHMACKeys_CacheDataKeys& _internal_cache_data_keys(int index) const;
  ::CMsgSteamLearnHMACKeys_CacheDataKeys* _internal_add_cache_data_keys();
  public:
  const ::CMsgSteamLearnHMACKeys_CacheDataKeys& cache_data_keys(int index) const;
  ::CMsgSteamLearnHMACKeys_CacheDataKeys* add_cache_data_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_CacheDataKeys >&
      cache_data_keys() const;

  // repeated .CMsgSteamLearnHMACKeys.SnapshotProjectKeys snapshot_project_keys = 3;
  int snapshot_project_keys_size() const;
  private:
  int _internal_snapshot_project_keys_size() const;
  public:
  void clear_snapshot_project_keys();
  ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* mutable_snapshot_project_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys >*
      mutable_snapshot_project_keys();
  private:
  const ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys& _internal_snapshot_project_keys(int index) const;
  ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* _internal_add_snapshot_project_keys();
  public:
  const ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys& snapshot_project_keys(int index) const;
  ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* add_snapshot_project_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys >&
      snapshot_project_keys() const;

  // optional string register_data_source_key = 1;
  bool has_register_data_source_key() const;
  private:
  bool _internal_has_register_data_source_key() const;
  public:
  void clear_register_data_source_key();
  const std::string& register_data_source_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_register_data_source_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_register_data_source_key();
  PROTOBUF_NODISCARD std::string* release_register_data_source_key();
  void set_allocated_register_data_source_key(std::string* register_data_source_key);
  private:
  const std::string& _internal_register_data_source_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_register_data_source_key(const std::string& value);
  std::string* _internal_mutable_register_data_source_key();
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnHMACKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_CacheDataKeys > cache_data_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys > snapshot_project_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_data_source_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_GetHMACKeys_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_GetHMACKeys_Request) */ {
 public:
  inline CMsgSteamLearn_GetHMACKeys_Request() : CMsgSteamLearn_GetHMACKeys_Request(nullptr) {}
  ~CMsgSteamLearn_GetHMACKeys_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_GetHMACKeys_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_GetHMACKeys_Request(const CMsgSteamLearn_GetHMACKeys_Request& from);
  CMsgSteamLearn_GetHMACKeys_Request(CMsgSteamLearn_GetHMACKeys_Request&& from) noexcept
    : CMsgSteamLearn_GetHMACKeys_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_GetHMACKeys_Request& operator=(const CMsgSteamLearn_GetHMACKeys_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_GetHMACKeys_Request& operator=(CMsgSteamLearn_GetHMACKeys_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_GetHMACKeys_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_GetHMACKeys_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_GetHMACKeys_Request*>(
               &_CMsgSteamLearn_GetHMACKeys_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgSteamLearn_GetHMACKeys_Request& a, CMsgSteamLearn_GetHMACKeys_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_GetHMACKeys_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_GetHMACKeys_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_GetHMACKeys_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_GetHMACKeys_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_GetHMACKeys_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_GetHMACKeys_Request& from) {
    CMsgSteamLearn_GetHMACKeys_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_GetHMACKeys_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_GetHMACKeys_Request";
  }
  protected:
  explicit CMsgSteamLearn_GetHMACKeys_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_GetHMACKeys_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_GetHMACKeys_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_GetHMACKeys_Response) */ {
 public:
  inline CMsgSteamLearn_GetHMACKeys_Response() : CMsgSteamLearn_GetHMACKeys_Response(nullptr) {}
  ~CMsgSteamLearn_GetHMACKeys_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_GetHMACKeys_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_GetHMACKeys_Response(const CMsgSteamLearn_GetHMACKeys_Response& from);
  CMsgSteamLearn_GetHMACKeys_Response(CMsgSteamLearn_GetHMACKeys_Response&& from) noexcept
    : CMsgSteamLearn_GetHMACKeys_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_GetHMACKeys_Response& operator=(const CMsgSteamLearn_GetHMACKeys_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_GetHMACKeys_Response& operator=(CMsgSteamLearn_GetHMACKeys_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_GetHMACKeys_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_GetHMACKeys_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_GetHMACKeys_Response*>(
               &_CMsgSteamLearn_GetHMACKeys_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgSteamLearn_GetHMACKeys_Response& a, CMsgSteamLearn_GetHMACKeys_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_GetHMACKeys_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_GetHMACKeys_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_GetHMACKeys_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_GetHMACKeys_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_GetHMACKeys_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_GetHMACKeys_Response& from) {
    CMsgSteamLearn_GetHMACKeys_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_GetHMACKeys_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_GetHMACKeys_Response";
  }
  protected:
  explicit CMsgSteamLearn_GetHMACKeys_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .CMsgSteamLearnHMACKeys keys = 2;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::CMsgSteamLearnHMACKeys& keys() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnHMACKeys* release_keys();
  ::CMsgSteamLearnHMACKeys* mutable_keys();
  void set_allocated_keys(::CMsgSteamLearnHMACKeys* keys);
  private:
  const ::CMsgSteamLearnHMACKeys& _internal_keys() const;
  ::CMsgSteamLearnHMACKeys* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::CMsgSteamLearnHMACKeys* keys);
  ::CMsgSteamLearnHMACKeys* unsafe_arena_release_keys();

  // optional .ESteamLearnGetHMACKeysResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::ESteamLearnGetHMACKeysResult result() const;
  void set_result(::ESteamLearnGetHMACKeysResult value);
  private:
  ::ESteamLearnGetHMACKeysResult _internal_result() const;
  void _internal_set_result(::ESteamLearnGetHMACKeysResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_GetHMACKeys_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgSteamLearnHMACKeys* keys_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_Inference_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_Inference_Request) */ {
 public:
  inline CMsgSteamLearn_Inference_Request() : CMsgSteamLearn_Inference_Request(nullptr) {}
  ~CMsgSteamLearn_Inference_Request() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_Inference_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_Inference_Request(const CMsgSteamLearn_Inference_Request& from);
  CMsgSteamLearn_Inference_Request(CMsgSteamLearn_Inference_Request&& from) noexcept
    : CMsgSteamLearn_Inference_Request() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_Inference_Request& operator=(const CMsgSteamLearn_Inference_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_Inference_Request& operator=(CMsgSteamLearn_Inference_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_Inference_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_Inference_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_Inference_Request*>(
               &_CMsgSteamLearn_Inference_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgSteamLearn_Inference_Request& a, CMsgSteamLearn_Inference_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_Inference_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_Inference_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_Inference_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_Inference_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_Inference_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_Inference_Request& from) {
    CMsgSteamLearn_Inference_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_Inference_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_Inference_Request";
  }
  protected:
  explicit CMsgSteamLearn_Inference_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalDataFieldNumber = 7,
    kAccessTokenFieldNumber = 1,
    kAccessDataFieldNumber = 2,
    kDataFieldNumber = 6,
    kProjectIdFieldNumber = 3,
    kPublishedVersionFieldNumber = 4,
    kOverrideTrainIdFieldNumber = 5,
  };
  // repeated float additional_data = 7;
  int additional_data_size() const;
  private:
  int _internal_additional_data_size() const;
  public:
  void clear_additional_data();
  private:
  float _internal_additional_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_additional_data() const;
  void _internal_add_additional_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_additional_data();
  public:
  float additional_data(int index) const;
  void set_additional_data(int index, float value);
  void add_additional_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      additional_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_additional_data();

  // optional string access_token = 1;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional .CMsgSteamLearn_AccessData access_data = 2;
  bool has_access_data() const;
  private:
  bool _internal_has_access_data() const;
  public:
  void clear_access_data();
  const ::CMsgSteamLearn_AccessData& access_data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_AccessData* release_access_data();
  ::CMsgSteamLearn_AccessData* mutable_access_data();
  void set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data);
  private:
  const ::CMsgSteamLearn_AccessData& _internal_access_data() const;
  ::CMsgSteamLearn_AccessData* _internal_mutable_access_data();
  public:
  void unsafe_arena_set_allocated_access_data(
      ::CMsgSteamLearn_AccessData* access_data);
  ::CMsgSteamLearn_AccessData* unsafe_arena_release_access_data();

  // optional .CMsgSteamLearnDataList data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgSteamLearnDataList& data() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnDataList* release_data();
  ::CMsgSteamLearnDataList* mutable_data();
  void set_allocated_data(::CMsgSteamLearnDataList* data);
  private:
  const ::CMsgSteamLearnDataList& _internal_data() const;
  ::CMsgSteamLearnDataList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgSteamLearnDataList* data);
  ::CMsgSteamLearnDataList* unsafe_arena_release_data();

  // optional uint32 project_id = 3;
  bool has_project_id() const;
  private:
  bool _internal_has_project_id() const;
  public:
  void clear_project_id();
  uint32_t project_id() const;
  void set_project_id(uint32_t value);
  private:
  uint32_t _internal_project_id() const;
  void _internal_set_project_id(uint32_t value);
  public:

  // optional uint32 published_version = 4;
  bool has_published_version() const;
  private:
  bool _internal_has_published_version() const;
  public:
  void clear_published_version();
  uint32_t published_version() const;
  void set_published_version(uint32_t value);
  private:
  uint32_t _internal_published_version() const;
  void _internal_set_published_version(uint32_t value);
  public:

  // optional uint32 override_train_id = 5;
  bool has_override_train_id() const;
  private:
  bool _internal_has_override_train_id() const;
  public:
  void clear_override_train_id();
  uint32_t override_train_id() const;
  void set_override_train_id(uint32_t value);
  private:
  uint32_t _internal_override_train_id() const;
  void _internal_set_override_train_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_Inference_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > additional_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::CMsgSteamLearn_AccessData* access_data_;
    ::CMsgSteamLearnDataList* data_;
    uint32_t project_id_;
    uint32_t published_version_;
    uint32_t override_train_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_InferenceBackend_Response_Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_InferenceBackend_Response.Output) */ {
 public:
  inline CMsgSteamLearn_InferenceBackend_Response_Output() : CMsgSteamLearn_InferenceBackend_Response_Output(nullptr) {}
  ~CMsgSteamLearn_InferenceBackend_Response_Output() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_InferenceBackend_Response_Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_InferenceBackend_Response_Output(const CMsgSteamLearn_InferenceBackend_Response_Output& from);
  CMsgSteamLearn_InferenceBackend_Response_Output(CMsgSteamLearn_InferenceBackend_Response_Output&& from) noexcept
    : CMsgSteamLearn_InferenceBackend_Response_Output() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_InferenceBackend_Response_Output& operator=(const CMsgSteamLearn_InferenceBackend_Response_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_InferenceBackend_Response_Output& operator=(CMsgSteamLearn_InferenceBackend_Response_Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_InferenceBackend_Response_Output& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseTypeCase {
    kBinaryCrossentropy = 1,
    kCategoricalCrossentropy = 2,
    kMultiBinaryCrossentropy = 3,
    RESPONSETYPE_NOT_SET = 0,
  };

  static inline const CMsgSteamLearn_InferenceBackend_Response_Output* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_InferenceBackend_Response_Output*>(
               &_CMsgSteamLearn_InferenceBackend_Response_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgSteamLearn_InferenceBackend_Response_Output& a, CMsgSteamLearn_InferenceBackend_Response_Output& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_InferenceBackend_Response_Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_InferenceBackend_Response_Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_InferenceBackend_Response_Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_InferenceBackend_Response_Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_InferenceBackend_Response_Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_InferenceBackend_Response_Output& from) {
    CMsgSteamLearn_InferenceBackend_Response_Output::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_InferenceBackend_Response_Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_InferenceBackend_Response.Output";
  }
  protected:
  explicit CMsgSteamLearn_InferenceBackend_Response_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryCrossentropyFieldNumber = 1,
    kCategoricalCrossentropyFieldNumber = 2,
    kMultiBinaryCrossentropyFieldNumber = 3,
  };
  // .CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput binary_crossentropy = 1;
  bool has_binary_crossentropy() const;
  private:
  bool _internal_has_binary_crossentropy() const;
  public:
  void clear_binary_crossentropy();
  const ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& binary_crossentropy() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* release_binary_crossentropy();
  ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* mutable_binary_crossentropy();
  void set_allocated_binary_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* binary_crossentropy);
  private:
  const ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& _internal_binary_crossentropy() const;
  ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* _internal_mutable_binary_crossentropy();
  public:
  void unsafe_arena_set_allocated_binary_crossentropy(
      ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* binary_crossentropy);
  ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* unsafe_arena_release_binary_crossentropy();

  // .CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput categorical_crossentropy = 2;
  bool has_categorical_crossentropy() const;
  private:
  bool _internal_has_categorical_crossentropy() const;
  public:
  void clear_categorical_crossentropy();
  const ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& categorical_crossentropy() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* release_categorical_crossentropy();
  ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* mutable_categorical_crossentropy();
  void set_allocated_categorical_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* categorical_crossentropy);
  private:
  const ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& _internal_categorical_crossentropy() const;
  ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* _internal_mutable_categorical_crossentropy();
  public:
  void unsafe_arena_set_allocated_categorical_crossentropy(
      ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* categorical_crossentropy);
  ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* unsafe_arena_release_categorical_crossentropy();

  // .CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput multi_binary_crossentropy = 3;
  bool has_multi_binary_crossentropy() const;
  private:
  bool _internal_has_multi_binary_crossentropy() const;
  public:
  void clear_multi_binary_crossentropy();
  const ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& multi_binary_crossentropy() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* release_multi_binary_crossentropy();
  ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* mutable_multi_binary_crossentropy();
  void set_allocated_multi_binary_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* multi_binary_crossentropy);
  private:
  const ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& _internal_multi_binary_crossentropy() const;
  ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* _internal_mutable_multi_binary_crossentropy();
  public:
  void unsafe_arena_set_allocated_multi_binary_crossentropy(
      ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* multi_binary_crossentropy);
  ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* unsafe_arena_release_multi_binary_crossentropy();

  void clear_ResponseType();
  ResponseTypeCase ResponseType_case() const;
  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_InferenceBackend_Response.Output)
 private:
  class _Internal;
  void set_has_binary_crossentropy();
  void set_has_categorical_crossentropy();
  void set_has_multi_binary_crossentropy();

  inline bool has_ResponseType() const;
  inline void clear_has_ResponseType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseTypeUnion {
      constexpr ResponseTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* binary_crossentropy_;
      ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* categorical_crossentropy_;
      ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* multi_binary_crossentropy_;
    } ResponseType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput) */ {
 public:
  inline CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput() : CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput(nullptr) {}
  ~CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput(const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& from);
  CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput&& from) noexcept
    : CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& operator=(const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& operator=(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput*>(
               &_CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& a, CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& from) {
    CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput";
  }
  protected:
  explicit CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional float value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput) */ {
 public:
  inline CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput() : CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput(nullptr) {}
  ~CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput(const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& from);
  CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput&& from) noexcept
    : CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& operator=(const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& operator=(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput*>(
               &_CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& a, CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& from) {
    CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput";
  }
  protected:
  explicit CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated float weight = 1;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput) */ {
 public:
  inline CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput() : CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput(nullptr) {}
  ~CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput(const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& from);
  CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput&& from) noexcept
    : CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& operator=(const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& operator=(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput*>(
               &_CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& a, CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& from) {
    CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput";
  }
  protected:
  explicit CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated float weight = 1;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_InferenceBackend_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_InferenceBackend_Response) */ {
 public:
  inline CMsgSteamLearn_InferenceBackend_Response() : CMsgSteamLearn_InferenceBackend_Response(nullptr) {}
  ~CMsgSteamLearn_InferenceBackend_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_InferenceBackend_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_InferenceBackend_Response(const CMsgSteamLearn_InferenceBackend_Response& from);
  CMsgSteamLearn_InferenceBackend_Response(CMsgSteamLearn_InferenceBackend_Response&& from) noexcept
    : CMsgSteamLearn_InferenceBackend_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_InferenceBackend_Response& operator=(const CMsgSteamLearn_InferenceBackend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_InferenceBackend_Response& operator=(CMsgSteamLearn_InferenceBackend_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_InferenceBackend_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_InferenceBackend_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_InferenceBackend_Response*>(
               &_CMsgSteamLearn_InferenceBackend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgSteamLearn_InferenceBackend_Response& a, CMsgSteamLearn_InferenceBackend_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_InferenceBackend_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_InferenceBackend_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_InferenceBackend_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_InferenceBackend_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_InferenceBackend_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_InferenceBackend_Response& from) {
    CMsgSteamLearn_InferenceBackend_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_InferenceBackend_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_InferenceBackend_Response";
  }
  protected:
  explicit CMsgSteamLearn_InferenceBackend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamLearn_InferenceBackend_Response_Output Output;
  typedef CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput BinaryCrossEntropyOutput;
  typedef CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput MutliBinaryCrossEntropyOutput;
  typedef CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput CategoricalCrossEntropyOutput;

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
  };
  // repeated .CMsgSteamLearn_InferenceBackend_Response.Output outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::CMsgSteamLearn_InferenceBackend_Response_Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_InferenceBackend_Response_Output >*
      mutable_outputs();
  private:
  const ::CMsgSteamLearn_InferenceBackend_Response_Output& _internal_outputs(int index) const;
  ::CMsgSteamLearn_InferenceBackend_Response_Output* _internal_add_outputs();
  public:
  const ::CMsgSteamLearn_InferenceBackend_Response_Output& outputs(int index) const;
  ::CMsgSteamLearn_InferenceBackend_Response_Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_InferenceBackend_Response_Output >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_InferenceBackend_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_InferenceBackend_Response_Output > outputs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearn_Inference_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearn_Inference_Response) */ {
 public:
  inline CMsgSteamLearn_Inference_Response() : CMsgSteamLearn_Inference_Response(nullptr) {}
  ~CMsgSteamLearn_Inference_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearn_Inference_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearn_Inference_Response(const CMsgSteamLearn_Inference_Response& from);
  CMsgSteamLearn_Inference_Response(CMsgSteamLearn_Inference_Response&& from) noexcept
    : CMsgSteamLearn_Inference_Response() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearn_Inference_Response& operator=(const CMsgSteamLearn_Inference_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearn_Inference_Response& operator=(CMsgSteamLearn_Inference_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearn_Inference_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearn_Inference_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearn_Inference_Response*>(
               &_CMsgSteamLearn_Inference_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgSteamLearn_Inference_Response& a, CMsgSteamLearn_Inference_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearn_Inference_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearn_Inference_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearn_Inference_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearn_Inference_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearn_Inference_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearn_Inference_Response& from) {
    CMsgSteamLearn_Inference_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearn_Inference_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearn_Inference_Response";
  }
  protected:
  explicit CMsgSteamLearn_Inference_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackendResponseFieldNumber = 2,
    kInferenceResultFieldNumber = 1,
  };
  // optional .CMsgSteamLearn_InferenceBackend_Response backend_response = 2;
  bool has_backend_response() const;
  private:
  bool _internal_has_backend_response() const;
  public:
  void clear_backend_response();
  const ::CMsgSteamLearn_InferenceBackend_Response& backend_response() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearn_InferenceBackend_Response* release_backend_response();
  ::CMsgSteamLearn_InferenceBackend_Response* mutable_backend_response();
  void set_allocated_backend_response(::CMsgSteamLearn_InferenceBackend_Response* backend_response);
  private:
  const ::CMsgSteamLearn_InferenceBackend_Response& _internal_backend_response() const;
  ::CMsgSteamLearn_InferenceBackend_Response* _internal_mutable_backend_response();
  public:
  void unsafe_arena_set_allocated_backend_response(
      ::CMsgSteamLearn_InferenceBackend_Response* backend_response);
  ::CMsgSteamLearn_InferenceBackend_Response* unsafe_arena_release_backend_response();

  // optional .ESteamLearnInferenceResult inference_result = 1;
  bool has_inference_result() const;
  private:
  bool _internal_has_inference_result() const;
  public:
  void clear_inference_result();
  ::ESteamLearnInferenceResult inference_result() const;
  void set_inference_result(::ESteamLearnInferenceResult value);
  private:
  ::ESteamLearnInferenceResult _internal_inference_result() const;
  void _internal_set_inference_result(::ESteamLearnInferenceResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearn_Inference_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgSteamLearn_InferenceBackend_Response* backend_response_;
    int inference_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fsteamlearn_2esteamworkssdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamLearnDataSourceDescObject

// repeated .CMsgSteamLearnDataSourceDescElement elements = 1;
inline int CMsgSteamLearnDataSourceDescObject::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int CMsgSteamLearnDataSourceDescObject::elements_size() const {
  return _internal_elements_size();
}
inline void CMsgSteamLearnDataSourceDescObject::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::CMsgSteamLearnDataSourceDescElement* CMsgSteamLearnDataSourceDescObject::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSourceDescObject.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataSourceDescElement >*
CMsgSteamLearnDataSourceDescObject::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataSourceDescObject.elements)
  return &_impl_.elements_;
}
inline const ::CMsgSteamLearnDataSourceDescElement& CMsgSteamLearnDataSourceDescObject::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::CMsgSteamLearnDataSourceDescElement& CMsgSteamLearnDataSourceDescObject::elements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSourceDescObject.elements)
  return _internal_elements(index);
}
inline ::CMsgSteamLearnDataSourceDescElement* CMsgSteamLearnDataSourceDescObject::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::CMsgSteamLearnDataSourceDescElement* CMsgSteamLearnDataSourceDescObject::add_elements() {
  ::CMsgSteamLearnDataSourceDescElement* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataSourceDescObject.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataSourceDescElement >&
CMsgSteamLearnDataSourceDescObject::elements() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataSourceDescObject.elements)
  return _impl_.elements_;
}

// -------------------------------------------------------------------

// CMsgSteamLearnDataSourceDescElement

// optional string name = 1;
inline bool CMsgSteamLearnDataSourceDescElement::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSourceDescElement::has_name() const {
  return _internal_has_name();
}
inline void CMsgSteamLearnDataSourceDescElement::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnDataSourceDescElement::name() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSourceDescElement.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnDataSourceDescElement::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSourceDescElement.name)
}
inline std::string* CMsgSteamLearnDataSourceDescElement::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSourceDescElement.name)
  return _s;
}
inline const std::string& CMsgSteamLearnDataSourceDescElement::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgSteamLearnDataSourceDescElement::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSourceDescElement::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSourceDescElement::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataSourceDescElement.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnDataSourceDescElement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataSourceDescElement.name)
}

// optional .ESteamLearnDataType data_type = 2;
inline bool CMsgSteamLearnDataSourceDescElement::_internal_has_data_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSourceDescElement::has_data_type() const {
  return _internal_has_data_type();
}
inline void CMsgSteamLearnDataSourceDescElement::clear_data_type() {
  _impl_.data_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ESteamLearnDataType CMsgSteamLearnDataSourceDescElement::_internal_data_type() const {
  return static_cast< ::ESteamLearnDataType >(_impl_.data_type_);
}
inline ::ESteamLearnDataType CMsgSteamLearnDataSourceDescElement::data_type() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSourceDescElement.data_type)
  return _internal_data_type();
}
inline void CMsgSteamLearnDataSourceDescElement::_internal_set_data_type(::ESteamLearnDataType value) {
  assert(::ESteamLearnDataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_type_ = value;
}
inline void CMsgSteamLearnDataSourceDescElement::set_data_type(::ESteamLearnDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSourceDescElement.data_type)
}

// optional .CMsgSteamLearnDataSourceDescObject object = 3;
inline bool CMsgSteamLearnDataSourceDescElement::_internal_has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline bool CMsgSteamLearnDataSourceDescElement::has_object() const {
  return _internal_has_object();
}
inline void CMsgSteamLearnDataSourceDescElement::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearnDataSourceDescObject& CMsgSteamLearnDataSourceDescElement::_internal_object() const {
  const ::CMsgSteamLearnDataSourceDescObject* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataSourceDescObject&>(
      ::_CMsgSteamLearnDataSourceDescObject_default_instance_);
}
inline const ::CMsgSteamLearnDataSourceDescObject& CMsgSteamLearnDataSourceDescElement::object() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSourceDescElement.object)
  return _internal_object();
}
inline void CMsgSteamLearnDataSourceDescElement::unsafe_arena_set_allocated_object(
    ::CMsgSteamLearnDataSourceDescObject* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearnDataSourceDescElement.object)
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSourceDescElement::release_object() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearnDataSourceDescObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSourceDescElement::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataSourceDescElement.object)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearnDataSourceDescObject* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSourceDescElement::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataSourceDescObject>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSourceDescElement::mutable_object() {
  ::CMsgSteamLearnDataSourceDescObject* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSourceDescElement.object)
  return _msg;
}
inline void CMsgSteamLearnDataSourceDescElement::set_allocated_object(::CMsgSteamLearnDataSourceDescObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataSourceDescElement.object)
}

// optional uint32 count = 4;
inline bool CMsgSteamLearnDataSourceDescElement::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSourceDescElement::has_count() const {
  return _internal_has_count();
}
inline void CMsgSteamLearnDataSourceDescElement::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearnDataSourceDescElement::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CMsgSteamLearnDataSourceDescElement::count() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSourceDescElement.count)
  return _internal_count();
}
inline void CMsgSteamLearnDataSourceDescElement::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.count_ = value;
}
inline void CMsgSteamLearnDataSourceDescElement::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSourceDescElement.count)
}

// -------------------------------------------------------------------

// CMsgSteamLearnDataSource

// optional uint32 id = 1;
inline bool CMsgSteamLearnDataSource::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_id() const {
  return _internal_has_id();
}
inline void CMsgSteamLearnDataSource::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearnDataSource::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgSteamLearnDataSource::id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.id)
  return _internal_id();
}
inline void CMsgSteamLearnDataSource::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void CMsgSteamLearnDataSource::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.id)
}

// optional string name = 2;
inline bool CMsgSteamLearnDataSource::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_name() const {
  return _internal_has_name();
}
inline void CMsgSteamLearnDataSource::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnDataSource::name() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnDataSource::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.name)
}
inline std::string* CMsgSteamLearnDataSource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSource.name)
  return _s;
}
inline const std::string& CMsgSteamLearnDataSource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgSteamLearnDataSource::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSource::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSource::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataSource.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnDataSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataSource.name)
}

// optional uint32 version = 3;
inline bool CMsgSteamLearnDataSource::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_version() const {
  return _internal_has_version();
}
inline void CMsgSteamLearnDataSource::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearnDataSource::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CMsgSteamLearnDataSource::version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.version)
  return _internal_version();
}
inline void CMsgSteamLearnDataSource::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.version_ = value;
}
inline void CMsgSteamLearnDataSource::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.version)
}

// optional string source_description = 4;
inline bool CMsgSteamLearnDataSource::_internal_has_source_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_source_description() const {
  return _internal_has_source_description();
}
inline void CMsgSteamLearnDataSource::clear_source_description() {
  _impl_.source_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamLearnDataSource::source_description() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.source_description)
  return _internal_source_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnDataSource::set_source_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.source_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.source_description)
}
inline std::string* CMsgSteamLearnDataSource::mutable_source_description() {
  std::string* _s = _internal_mutable_source_description();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSource.source_description)
  return _s;
}
inline const std::string& CMsgSteamLearnDataSource::_internal_source_description() const {
  return _impl_.source_description_.Get();
}
inline void CMsgSteamLearnDataSource::_internal_set_source_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_description_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSource::_internal_mutable_source_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.source_description_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataSource::release_source_description() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataSource.source_description)
  if (!_internal_has_source_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.source_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_description_.IsDefault()) {
    _impl_.source_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnDataSource::set_allocated_source_description(std::string* source_description) {
  if (source_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_description_.SetAllocated(source_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_description_.IsDefault()) {
    _impl_.source_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataSource.source_description)
}

// optional .CMsgSteamLearnDataSourceDescObject structure = 5;
inline bool CMsgSteamLearnDataSource::_internal_has_structure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.structure_ != nullptr);
  return value;
}
inline bool CMsgSteamLearnDataSource::has_structure() const {
  return _internal_has_structure();
}
inline void CMsgSteamLearnDataSource::clear_structure() {
  if (_impl_.structure_ != nullptr) _impl_.structure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamLearnDataSourceDescObject& CMsgSteamLearnDataSource::_internal_structure() const {
  const ::CMsgSteamLearnDataSourceDescObject* p = _impl_.structure_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataSourceDescObject&>(
      ::_CMsgSteamLearnDataSourceDescObject_default_instance_);
}
inline const ::CMsgSteamLearnDataSourceDescObject& CMsgSteamLearnDataSource::structure() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.structure)
  return _internal_structure();
}
inline void CMsgSteamLearnDataSource::unsafe_arena_set_allocated_structure(
    ::CMsgSteamLearnDataSourceDescObject* structure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.structure_);
  }
  _impl_.structure_ = structure;
  if (structure) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearnDataSource.structure)
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSource::release_structure() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataSourceDescObject* temp = _impl_.structure_;
  _impl_.structure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSource::unsafe_arena_release_structure() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataSource.structure)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataSourceDescObject* temp = _impl_.structure_;
  _impl_.structure_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSource::_internal_mutable_structure() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataSourceDescObject>(GetArenaForAllocation());
    _impl_.structure_ = p;
  }
  return _impl_.structure_;
}
inline ::CMsgSteamLearnDataSourceDescObject* CMsgSteamLearnDataSource::mutable_structure() {
  ::CMsgSteamLearnDataSourceDescObject* _msg = _internal_mutable_structure();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataSource.structure)
  return _msg;
}
inline void CMsgSteamLearnDataSource::set_allocated_structure(::CMsgSteamLearnDataSourceDescObject* structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.structure_;
  }
  if (structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(structure);
    if (message_arena != submessage_arena) {
      structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structure, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.structure_ = structure;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataSource.structure)
}

// optional uint32 structure_crc = 6;
inline bool CMsgSteamLearnDataSource::_internal_has_structure_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_structure_crc() const {
  return _internal_has_structure_crc();
}
inline void CMsgSteamLearnDataSource::clear_structure_crc() {
  _impl_.structure_crc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSteamLearnDataSource::_internal_structure_crc() const {
  return _impl_.structure_crc_;
}
inline uint32_t CMsgSteamLearnDataSource::structure_crc() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.structure_crc)
  return _internal_structure_crc();
}
inline void CMsgSteamLearnDataSource::_internal_set_structure_crc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.structure_crc_ = value;
}
inline void CMsgSteamLearnDataSource::set_structure_crc(uint32_t value) {
  _internal_set_structure_crc(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.structure_crc)
}

// optional uint32 cache_duration_seconds = 7;
inline bool CMsgSteamLearnDataSource::_internal_has_cache_duration_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataSource::has_cache_duration_seconds() const {
  return _internal_has_cache_duration_seconds();
}
inline void CMsgSteamLearnDataSource::clear_cache_duration_seconds() {
  _impl_.cache_duration_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSteamLearnDataSource::_internal_cache_duration_seconds() const {
  return _impl_.cache_duration_seconds_;
}
inline uint32_t CMsgSteamLearnDataSource::cache_duration_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataSource.cache_duration_seconds)
  return _internal_cache_duration_seconds();
}
inline void CMsgSteamLearnDataSource::_internal_set_cache_duration_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.cache_duration_seconds_ = value;
}
inline void CMsgSteamLearnDataSource::set_cache_duration_seconds(uint32_t value) {
  _internal_set_cache_duration_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataSource.cache_duration_seconds)
}

// -------------------------------------------------------------------

// CMsgSteamLearnDataObject

// repeated .CMsgSteamLearnDataElement elements = 1;
inline int CMsgSteamLearnDataObject::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int CMsgSteamLearnDataObject::elements_size() const {
  return _internal_elements_size();
}
inline void CMsgSteamLearnDataObject::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::CMsgSteamLearnDataElement* CMsgSteamLearnDataObject::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataObject.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataElement >*
CMsgSteamLearnDataObject::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataObject.elements)
  return &_impl_.elements_;
}
inline const ::CMsgSteamLearnDataElement& CMsgSteamLearnDataObject::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::CMsgSteamLearnDataElement& CMsgSteamLearnDataObject::elements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataObject.elements)
  return _internal_elements(index);
}
inline ::CMsgSteamLearnDataElement* CMsgSteamLearnDataObject::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::CMsgSteamLearnDataElement* CMsgSteamLearnDataObject::add_elements() {
  ::CMsgSteamLearnDataElement* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataObject.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataElement >&
CMsgSteamLearnDataObject::elements() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataObject.elements)
  return _impl_.elements_;
}

// -------------------------------------------------------------------

// CMsgSteamLearnDataElement

// optional string name = 1;
inline bool CMsgSteamLearnDataElement::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnDataElement::has_name() const {
  return _internal_has_name();
}
inline void CMsgSteamLearnDataElement::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnDataElement::name() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnDataElement::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.name)
}
inline std::string* CMsgSteamLearnDataElement::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataElement.name)
  return _s;
}
inline const std::string& CMsgSteamLearnDataElement::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgSteamLearnDataElement::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataElement::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnDataElement::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnDataElement.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnDataElement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnDataElement.name)
}

// repeated int32 data_int32s = 20;
inline int CMsgSteamLearnDataElement::_internal_data_int32s_size() const {
  return _impl_.data_int32s_.size();
}
inline int CMsgSteamLearnDataElement::data_int32s_size() const {
  return _internal_data_int32s_size();
}
inline void CMsgSteamLearnDataElement::clear_data_int32s() {
  _impl_.data_int32s_.Clear();
}
inline int32_t CMsgSteamLearnDataElement::_internal_data_int32s(int index) const {
  return _impl_.data_int32s_.Get(index);
}
inline int32_t CMsgSteamLearnDataElement::data_int32s(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.data_int32s)
  return _internal_data_int32s(index);
}
inline void CMsgSteamLearnDataElement::set_data_int32s(int index, int32_t value) {
  _impl_.data_int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.data_int32s)
}
inline void CMsgSteamLearnDataElement::_internal_add_data_int32s(int32_t value) {
  _impl_.data_int32s_.Add(value);
}
inline void CMsgSteamLearnDataElement::add_data_int32s(int32_t value) {
  _internal_add_data_int32s(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_int32s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnDataElement::_internal_data_int32s() const {
  return _impl_.data_int32s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnDataElement::data_int32s() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataElement.data_int32s)
  return _internal_data_int32s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnDataElement::_internal_mutable_data_int32s() {
  return &_impl_.data_int32s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnDataElement::mutable_data_int32s() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataElement.data_int32s)
  return _internal_mutable_data_int32s();
}

// repeated float data_floats = 21;
inline int CMsgSteamLearnDataElement::_internal_data_floats_size() const {
  return _impl_.data_floats_.size();
}
inline int CMsgSteamLearnDataElement::data_floats_size() const {
  return _internal_data_floats_size();
}
inline void CMsgSteamLearnDataElement::clear_data_floats() {
  _impl_.data_floats_.Clear();
}
inline float CMsgSteamLearnDataElement::_internal_data_floats(int index) const {
  return _impl_.data_floats_.Get(index);
}
inline float CMsgSteamLearnDataElement::data_floats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.data_floats)
  return _internal_data_floats(index);
}
inline void CMsgSteamLearnDataElement::set_data_floats(int index, float value) {
  _impl_.data_floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.data_floats)
}
inline void CMsgSteamLearnDataElement::_internal_add_data_floats(float value) {
  _impl_.data_floats_.Add(value);
}
inline void CMsgSteamLearnDataElement::add_data_floats(float value) {
  _internal_add_data_floats(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_floats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearnDataElement::_internal_data_floats() const {
  return _impl_.data_floats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearnDataElement::data_floats() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataElement.data_floats)
  return _internal_data_floats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearnDataElement::_internal_mutable_data_floats() {
  return &_impl_.data_floats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearnDataElement::mutable_data_floats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataElement.data_floats)
  return _internal_mutable_data_floats();
}

// repeated bool data_bools = 22;
inline int CMsgSteamLearnDataElement::_internal_data_bools_size() const {
  return _impl_.data_bools_.size();
}
inline int CMsgSteamLearnDataElement::data_bools_size() const {
  return _internal_data_bools_size();
}
inline void CMsgSteamLearnDataElement::clear_data_bools() {
  _impl_.data_bools_.Clear();
}
inline bool CMsgSteamLearnDataElement::_internal_data_bools(int index) const {
  return _impl_.data_bools_.Get(index);
}
inline bool CMsgSteamLearnDataElement::data_bools(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.data_bools)
  return _internal_data_bools(index);
}
inline void CMsgSteamLearnDataElement::set_data_bools(int index, bool value) {
  _impl_.data_bools_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.data_bools)
}
inline void CMsgSteamLearnDataElement::_internal_add_data_bools(bool value) {
  _impl_.data_bools_.Add(value);
}
inline void CMsgSteamLearnDataElement::add_data_bools(bool value) {
  _internal_add_data_bools(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_bools)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgSteamLearnDataElement::_internal_data_bools() const {
  return _impl_.data_bools_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgSteamLearnDataElement::data_bools() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataElement.data_bools)
  return _internal_data_bools();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgSteamLearnDataElement::_internal_mutable_data_bools() {
  return &_impl_.data_bools_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgSteamLearnDataElement::mutable_data_bools() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataElement.data_bools)
  return _internal_mutable_data_bools();
}

// repeated string data_strings = 23;
inline int CMsgSteamLearnDataElement::_internal_data_strings_size() const {
  return _impl_.data_strings_.size();
}
inline int CMsgSteamLearnDataElement::data_strings_size() const {
  return _internal_data_strings_size();
}
inline void CMsgSteamLearnDataElement::clear_data_strings() {
  _impl_.data_strings_.Clear();
}
inline std::string* CMsgSteamLearnDataElement::add_data_strings() {
  std::string* _s = _internal_add_data_strings();
  // @@protoc_insertion_point(field_add_mutable:CMsgSteamLearnDataElement.data_strings)
  return _s;
}
inline const std::string& CMsgSteamLearnDataElement::_internal_data_strings(int index) const {
  return _impl_.data_strings_.Get(index);
}
inline const std::string& CMsgSteamLearnDataElement::data_strings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.data_strings)
  return _internal_data_strings(index);
}
inline std::string* CMsgSteamLearnDataElement::mutable_data_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataElement.data_strings)
  return _impl_.data_strings_.Mutable(index);
}
inline void CMsgSteamLearnDataElement::set_data_strings(int index, const std::string& value) {
  _impl_.data_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::set_data_strings(int index, std::string&& value) {
  _impl_.data_strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::set_data_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::set_data_strings(int index, const char* value, size_t size) {
  _impl_.data_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamLearnDataElement.data_strings)
}
inline std::string* CMsgSteamLearnDataElement::_internal_add_data_strings() {
  return _impl_.data_strings_.Add();
}
inline void CMsgSteamLearnDataElement::add_data_strings(const std::string& value) {
  _impl_.data_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::add_data_strings(std::string&& value) {
  _impl_.data_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::add_data_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSteamLearnDataElement.data_strings)
}
inline void CMsgSteamLearnDataElement::add_data_strings(const char* value, size_t size) {
  _impl_.data_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSteamLearnDataElement.data_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgSteamLearnDataElement::data_strings() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataElement.data_strings)
  return _impl_.data_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgSteamLearnDataElement::mutable_data_strings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataElement.data_strings)
  return &_impl_.data_strings_;
}

// repeated .CMsgSteamLearnDataObject data_objects = 24;
inline int CMsgSteamLearnDataElement::_internal_data_objects_size() const {
  return _impl_.data_objects_.size();
}
inline int CMsgSteamLearnDataElement::data_objects_size() const {
  return _internal_data_objects_size();
}
inline void CMsgSteamLearnDataElement::clear_data_objects() {
  _impl_.data_objects_.Clear();
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnDataElement::mutable_data_objects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataElement.data_objects)
  return _impl_.data_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataObject >*
CMsgSteamLearnDataElement::mutable_data_objects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataElement.data_objects)
  return &_impl_.data_objects_;
}
inline const ::CMsgSteamLearnDataObject& CMsgSteamLearnDataElement::_internal_data_objects(int index) const {
  return _impl_.data_objects_.Get(index);
}
inline const ::CMsgSteamLearnDataObject& CMsgSteamLearnDataElement::data_objects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataElement.data_objects)
  return _internal_data_objects(index);
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnDataElement::_internal_add_data_objects() {
  return _impl_.data_objects_.Add();
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnDataElement::add_data_objects() {
  ::CMsgSteamLearnDataObject* _add = _internal_add_data_objects();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataElement.data_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnDataObject >&
CMsgSteamLearnDataElement::data_objects() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataElement.data_objects)
  return _impl_.data_objects_;
}

// -------------------------------------------------------------------

// CMsgSteamLearnData

// optional uint32 data_source_id = 1;
inline bool CMsgSteamLearnData::_internal_has_data_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnData::has_data_source_id() const {
  return _internal_has_data_source_id();
}
inline void CMsgSteamLearnData::clear_data_source_id() {
  _impl_.data_source_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnData::_internal_data_source_id() const {
  return _impl_.data_source_id_;
}
inline uint32_t CMsgSteamLearnData::data_source_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnData.data_source_id)
  return _internal_data_source_id();
}
inline void CMsgSteamLearnData::_internal_set_data_source_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_source_id_ = value;
}
inline void CMsgSteamLearnData::set_data_source_id(uint32_t value) {
  _internal_set_data_source_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnData.data_source_id)
}

// repeated uint64 keys = 2;
inline int CMsgSteamLearnData::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int CMsgSteamLearnData::keys_size() const {
  return _internal_keys_size();
}
inline void CMsgSteamLearnData::clear_keys() {
  _impl_.keys_.Clear();
}
inline uint64_t CMsgSteamLearnData::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline uint64_t CMsgSteamLearnData::keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnData.keys)
  return _internal_keys(index);
}
inline void CMsgSteamLearnData::set_keys(int index, uint64_t value) {
  _impl_.keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnData.keys)
}
inline void CMsgSteamLearnData::_internal_add_keys(uint64_t value) {
  _impl_.keys_.Add(value);
}
inline void CMsgSteamLearnData::add_keys(uint64_t value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnData.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSteamLearnData::_internal_keys() const {
  return _impl_.keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSteamLearnData::keys() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnData.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSteamLearnData::_internal_mutable_keys() {
  return &_impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSteamLearnData::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnData.keys)
  return _internal_mutable_keys();
}

// optional .CMsgSteamLearnDataObject data_object = 3;
inline bool CMsgSteamLearnData::_internal_has_data_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_object_ != nullptr);
  return value;
}
inline bool CMsgSteamLearnData::has_data_object() const {
  return _internal_has_data_object();
}
inline void CMsgSteamLearnData::clear_data_object() {
  if (_impl_.data_object_ != nullptr) _impl_.data_object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamLearnDataObject& CMsgSteamLearnData::_internal_data_object() const {
  const ::CMsgSteamLearnDataObject* p = _impl_.data_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataObject&>(
      ::_CMsgSteamLearnDataObject_default_instance_);
}
inline const ::CMsgSteamLearnDataObject& CMsgSteamLearnData::data_object() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnData.data_object)
  return _internal_data_object();
}
inline void CMsgSteamLearnData::unsafe_arena_set_allocated_data_object(
    ::CMsgSteamLearnDataObject* data_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_object_);
  }
  _impl_.data_object_ = data_object;
  if (data_object) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearnData.data_object)
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnData::release_data_object() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnDataObject* temp = _impl_.data_object_;
  _impl_.data_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnData::unsafe_arena_release_data_object() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnData.data_object)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnDataObject* temp = _impl_.data_object_;
  _impl_.data_object_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnData::_internal_mutable_data_object() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataObject>(GetArenaForAllocation());
    _impl_.data_object_ = p;
  }
  return _impl_.data_object_;
}
inline ::CMsgSteamLearnDataObject* CMsgSteamLearnData::mutable_data_object() {
  ::CMsgSteamLearnDataObject* _msg = _internal_mutable_data_object();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnData.data_object)
  return _msg;
}
inline void CMsgSteamLearnData::set_allocated_data_object(::CMsgSteamLearnDataObject* data_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_object_;
  }
  if (data_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_object);
    if (message_arena != submessage_arena) {
      data_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_object_ = data_object;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnData.data_object)
}

// -------------------------------------------------------------------

// CMsgSteamLearnDataList

// repeated .CMsgSteamLearnData data = 1;
inline int CMsgSteamLearnDataList::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CMsgSteamLearnDataList::data_size() const {
  return _internal_data_size();
}
inline void CMsgSteamLearnDataList::clear_data() {
  _impl_.data_.Clear();
}
inline ::CMsgSteamLearnData* CMsgSteamLearnDataList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnDataList.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >*
CMsgSteamLearnDataList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnDataList.data)
  return &_impl_.data_;
}
inline const ::CMsgSteamLearnData& CMsgSteamLearnDataList::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::CMsgSteamLearnData& CMsgSteamLearnDataList::data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnDataList.data)
  return _internal_data(index);
}
inline ::CMsgSteamLearnData* CMsgSteamLearnDataList::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::CMsgSteamLearnData* CMsgSteamLearnDataList::add_data() {
  ::CMsgSteamLearnData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnDataList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >&
CMsgSteamLearnDataList::data() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnDataList.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// CMsgSteamLearn_AccessData

// optional uint32 publisher_id = 1;
inline bool CMsgSteamLearn_AccessData::_internal_has_publisher_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_AccessData::has_publisher_id() const {
  return _internal_has_publisher_id();
}
inline void CMsgSteamLearn_AccessData::clear_publisher_id() {
  _impl_.publisher_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearn_AccessData::_internal_publisher_id() const {
  return _impl_.publisher_id_;
}
inline uint32_t CMsgSteamLearn_AccessData::publisher_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_AccessData.publisher_id)
  return _internal_publisher_id();
}
inline void CMsgSteamLearn_AccessData::_internal_set_publisher_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.publisher_id_ = value;
}
inline void CMsgSteamLearn_AccessData::set_publisher_id(uint32_t value) {
  _internal_set_publisher_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_AccessData.publisher_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgSteamLearn_AccessData::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearn_AccessData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgSteamLearn_AccessData::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearn_AccessData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgSteamLearn_AccessData::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_AccessData.timestamp)
  return _internal_timestamp();
}
inline void CMsgSteamLearn_AccessData::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgSteamLearn_AccessData::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_AccessData.timestamp)
}

// optional uint64 random_value = 3;
inline bool CMsgSteamLearn_AccessData::_internal_has_random_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearn_AccessData::has_random_value() const {
  return _internal_has_random_value();
}
inline void CMsgSteamLearn_AccessData::clear_random_value() {
  _impl_.random_value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSteamLearn_AccessData::_internal_random_value() const {
  return _impl_.random_value_;
}
inline uint64_t CMsgSteamLearn_AccessData::random_value() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_AccessData.random_value)
  return _internal_random_value();
}
inline void CMsgSteamLearn_AccessData::_internal_set_random_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.random_value_ = value;
}
inline void CMsgSteamLearn_AccessData::set_random_value(uint64_t value) {
  _internal_set_random_value(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_AccessData.random_value)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_RegisterDataSource_Request

// optional string access_token = 1;
inline bool CMsgSteamLearn_RegisterDataSource_Request::_internal_has_access_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_RegisterDataSource_Request::has_access_token() const {
  return _internal_has_access_token();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearn_RegisterDataSource_Request::access_token() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_RegisterDataSource_Request.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearn_RegisterDataSource_Request::set_access_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_RegisterDataSource_Request.access_token)
}
inline std::string* CMsgSteamLearn_RegisterDataSource_Request::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_RegisterDataSource_Request.access_token)
  return _s;
}
inline const std::string& CMsgSteamLearn_RegisterDataSource_Request::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::_internal_set_access_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_RegisterDataSource_Request::_internal_mutable_access_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_RegisterDataSource_Request::release_access_token() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_RegisterDataSource_Request.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearn_RegisterDataSource_Request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_RegisterDataSource_Request.access_token)
}

// optional .CMsgSteamLearn_AccessData access_data = 2;
inline bool CMsgSteamLearn_RegisterDataSource_Request::_internal_has_access_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.access_data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_RegisterDataSource_Request::has_access_data() const {
  return _internal_has_access_data();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::clear_access_data() {
  if (_impl_.access_data_ != nullptr) _impl_.access_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_RegisterDataSource_Request::_internal_access_data() const {
  const ::CMsgSteamLearn_AccessData* p = _impl_.access_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearn_AccessData&>(
      ::_CMsgSteamLearn_AccessData_default_instance_);
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_RegisterDataSource_Request::access_data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_RegisterDataSource_Request.access_data)
  return _internal_access_data();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::unsafe_arena_set_allocated_access_data(
    ::CMsgSteamLearn_AccessData* access_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.access_data_);
  }
  _impl_.access_data_ = access_data;
  if (access_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_RegisterDataSource_Request.access_data)
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_RegisterDataSource_Request::release_access_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_RegisterDataSource_Request::unsafe_arena_release_access_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_RegisterDataSource_Request.access_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_RegisterDataSource_Request::_internal_mutable_access_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.access_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearn_AccessData>(GetArenaForAllocation());
    _impl_.access_data_ = p;
  }
  return _impl_.access_data_;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_RegisterDataSource_Request::mutable_access_data() {
  ::CMsgSteamLearn_AccessData* _msg = _internal_mutable_access_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_RegisterDataSource_Request.access_data)
  return _msg;
}
inline void CMsgSteamLearn_RegisterDataSource_Request::set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.access_data_;
  }
  if (access_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(access_data);
    if (message_arena != submessage_arena) {
      access_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.access_data_ = access_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_RegisterDataSource_Request.access_data)
}

// optional .CMsgSteamLearnDataSource data_source = 3;
inline bool CMsgSteamLearn_RegisterDataSource_Request::_internal_has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_RegisterDataSource_Request::has_data_source() const {
  return _internal_has_data_source();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamLearnDataSource& CMsgSteamLearn_RegisterDataSource_Request::_internal_data_source() const {
  const ::CMsgSteamLearnDataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataSource&>(
      ::_CMsgSteamLearnDataSource_default_instance_);
}
inline const ::CMsgSteamLearnDataSource& CMsgSteamLearn_RegisterDataSource_Request::data_source() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_RegisterDataSource_Request.data_source)
  return _internal_data_source();
}
inline void CMsgSteamLearn_RegisterDataSource_Request::unsafe_arena_set_allocated_data_source(
    ::CMsgSteamLearnDataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_RegisterDataSource_Request.data_source)
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Request::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Request::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_RegisterDataSource_Request.data_source)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Request::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Request::mutable_data_source() {
  ::CMsgSteamLearnDataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_RegisterDataSource_Request.data_source)
  return _msg;
}
inline void CMsgSteamLearn_RegisterDataSource_Request::set_allocated_data_source(::CMsgSteamLearnDataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_source_;
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_source);
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_RegisterDataSource_Request.data_source)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_RegisterDataSource_Response

// optional .ESteammLearnRegisterDataSourceResult result = 1;
inline bool CMsgSteamLearn_RegisterDataSource_Response::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearn_RegisterDataSource_Response::has_result() const {
  return _internal_has_result();
}
inline void CMsgSteamLearn_RegisterDataSource_Response::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ESteammLearnRegisterDataSourceResult CMsgSteamLearn_RegisterDataSource_Response::_internal_result() const {
  return static_cast< ::ESteammLearnRegisterDataSourceResult >(_impl_.result_);
}
inline ::ESteammLearnRegisterDataSourceResult CMsgSteamLearn_RegisterDataSource_Response::result() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_RegisterDataSource_Response.result)
  return _internal_result();
}
inline void CMsgSteamLearn_RegisterDataSource_Response::_internal_set_result(::ESteammLearnRegisterDataSourceResult value) {
  assert(::ESteammLearnRegisterDataSourceResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_ = value;
}
inline void CMsgSteamLearn_RegisterDataSource_Response::set_result(::ESteammLearnRegisterDataSourceResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_RegisterDataSource_Response.result)
}

// optional .CMsgSteamLearnDataSource data_source = 2;
inline bool CMsgSteamLearn_RegisterDataSource_Response::_internal_has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_RegisterDataSource_Response::has_data_source() const {
  return _internal_has_data_source();
}
inline void CMsgSteamLearn_RegisterDataSource_Response::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamLearnDataSource& CMsgSteamLearn_RegisterDataSource_Response::_internal_data_source() const {
  const ::CMsgSteamLearnDataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataSource&>(
      ::_CMsgSteamLearnDataSource_default_instance_);
}
inline const ::CMsgSteamLearnDataSource& CMsgSteamLearn_RegisterDataSource_Response::data_source() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_RegisterDataSource_Response.data_source)
  return _internal_data_source();
}
inline void CMsgSteamLearn_RegisterDataSource_Response::unsafe_arena_set_allocated_data_source(
    ::CMsgSteamLearnDataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_RegisterDataSource_Response.data_source)
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Response::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnDataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Response::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_RegisterDataSource_Response.data_source)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnDataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Response::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::CMsgSteamLearnDataSource* CMsgSteamLearn_RegisterDataSource_Response::mutable_data_source() {
  ::CMsgSteamLearnDataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_RegisterDataSource_Response.data_source)
  return _msg;
}
inline void CMsgSteamLearn_RegisterDataSource_Response::set_allocated_data_source(::CMsgSteamLearnDataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_source_;
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_source);
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_RegisterDataSource_Response.data_source)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_CacheData_Request

// optional string access_token = 1;
inline bool CMsgSteamLearn_CacheData_Request::_internal_has_access_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_CacheData_Request::has_access_token() const {
  return _internal_has_access_token();
}
inline void CMsgSteamLearn_CacheData_Request::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearn_CacheData_Request::access_token() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_CacheData_Request.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearn_CacheData_Request::set_access_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_CacheData_Request.access_token)
}
inline std::string* CMsgSteamLearn_CacheData_Request::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_CacheData_Request.access_token)
  return _s;
}
inline const std::string& CMsgSteamLearn_CacheData_Request::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void CMsgSteamLearn_CacheData_Request::_internal_set_access_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_CacheData_Request::_internal_mutable_access_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_CacheData_Request::release_access_token() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_CacheData_Request.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearn_CacheData_Request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_CacheData_Request.access_token)
}

// optional .CMsgSteamLearn_AccessData access_data = 2;
inline bool CMsgSteamLearn_CacheData_Request::_internal_has_access_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.access_data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_CacheData_Request::has_access_data() const {
  return _internal_has_access_data();
}
inline void CMsgSteamLearn_CacheData_Request::clear_access_data() {
  if (_impl_.access_data_ != nullptr) _impl_.access_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_CacheData_Request::_internal_access_data() const {
  const ::CMsgSteamLearn_AccessData* p = _impl_.access_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearn_AccessData&>(
      ::_CMsgSteamLearn_AccessData_default_instance_);
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_CacheData_Request::access_data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_CacheData_Request.access_data)
  return _internal_access_data();
}
inline void CMsgSteamLearn_CacheData_Request::unsafe_arena_set_allocated_access_data(
    ::CMsgSteamLearn_AccessData* access_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.access_data_);
  }
  _impl_.access_data_ = access_data;
  if (access_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_CacheData_Request.access_data)
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_CacheData_Request::release_access_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_CacheData_Request::unsafe_arena_release_access_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_CacheData_Request.access_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_CacheData_Request::_internal_mutable_access_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.access_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearn_AccessData>(GetArenaForAllocation());
    _impl_.access_data_ = p;
  }
  return _impl_.access_data_;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_CacheData_Request::mutable_access_data() {
  ::CMsgSteamLearn_AccessData* _msg = _internal_mutable_access_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_CacheData_Request.access_data)
  return _msg;
}
inline void CMsgSteamLearn_CacheData_Request::set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.access_data_;
  }
  if (access_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(access_data);
    if (message_arena != submessage_arena) {
      access_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.access_data_ = access_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_CacheData_Request.access_data)
}

// optional .CMsgSteamLearnData data = 3;
inline bool CMsgSteamLearn_CacheData_Request::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_CacheData_Request::has_data() const {
  return _internal_has_data();
}
inline void CMsgSteamLearn_CacheData_Request::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamLearnData& CMsgSteamLearn_CacheData_Request::_internal_data() const {
  const ::CMsgSteamLearnData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnData&>(
      ::_CMsgSteamLearnData_default_instance_);
}
inline const ::CMsgSteamLearnData& CMsgSteamLearn_CacheData_Request::data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_CacheData_Request.data)
  return _internal_data();
}
inline void CMsgSteamLearn_CacheData_Request::unsafe_arena_set_allocated_data(
    ::CMsgSteamLearnData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_CacheData_Request.data)
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_CacheData_Request::release_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_CacheData_Request::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_CacheData_Request.data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_CacheData_Request::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_CacheData_Request::mutable_data() {
  ::CMsgSteamLearnData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_CacheData_Request.data)
  return _msg;
}
inline void CMsgSteamLearn_CacheData_Request::set_allocated_data(::CMsgSteamLearnData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_CacheData_Request.data)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_CacheData_Response

// optional .ESteamLearnCacheDataResult cache_data_result = 1;
inline bool CMsgSteamLearn_CacheData_Response::_internal_has_cache_data_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_CacheData_Response::has_cache_data_result() const {
  return _internal_has_cache_data_result();
}
inline void CMsgSteamLearn_CacheData_Response::clear_cache_data_result() {
  _impl_.cache_data_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ESteamLearnCacheDataResult CMsgSteamLearn_CacheData_Response::_internal_cache_data_result() const {
  return static_cast< ::ESteamLearnCacheDataResult >(_impl_.cache_data_result_);
}
inline ::ESteamLearnCacheDataResult CMsgSteamLearn_CacheData_Response::cache_data_result() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_CacheData_Response.cache_data_result)
  return _internal_cache_data_result();
}
inline void CMsgSteamLearn_CacheData_Response::_internal_set_cache_data_result(::ESteamLearnCacheDataResult value) {
  assert(::ESteamLearnCacheDataResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_data_result_ = value;
}
inline void CMsgSteamLearn_CacheData_Response::set_cache_data_result(::ESteamLearnCacheDataResult value) {
  _internal_set_cache_data_result(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_CacheData_Response.cache_data_result)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_SnapshotProject_Request

// optional string access_token = 1;
inline bool CMsgSteamLearn_SnapshotProject_Request::_internal_has_access_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Request::has_access_token() const {
  return _internal_has_access_token();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearn_SnapshotProject_Request::access_token() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearn_SnapshotProject_Request::set_access_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Request.access_token)
}
inline std::string* CMsgSteamLearn_SnapshotProject_Request::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_SnapshotProject_Request.access_token)
  return _s;
}
inline const std::string& CMsgSteamLearn_SnapshotProject_Request::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void CMsgSteamLearn_SnapshotProject_Request::_internal_set_access_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_SnapshotProject_Request::_internal_mutable_access_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_SnapshotProject_Request::release_access_token() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_SnapshotProject_Request.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_SnapshotProject_Request.access_token)
}

// optional .CMsgSteamLearn_AccessData access_data = 2;
inline bool CMsgSteamLearn_SnapshotProject_Request::_internal_has_access_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.access_data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Request::has_access_data() const {
  return _internal_has_access_data();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_access_data() {
  if (_impl_.access_data_ != nullptr) _impl_.access_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_SnapshotProject_Request::_internal_access_data() const {
  const ::CMsgSteamLearn_AccessData* p = _impl_.access_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearn_AccessData&>(
      ::_CMsgSteamLearn_AccessData_default_instance_);
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_SnapshotProject_Request::access_data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.access_data)
  return _internal_access_data();
}
inline void CMsgSteamLearn_SnapshotProject_Request::unsafe_arena_set_allocated_access_data(
    ::CMsgSteamLearn_AccessData* access_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.access_data_);
  }
  _impl_.access_data_ = access_data;
  if (access_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_SnapshotProject_Request.access_data)
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_SnapshotProject_Request::release_access_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_SnapshotProject_Request::unsafe_arena_release_access_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_SnapshotProject_Request.access_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_SnapshotProject_Request::_internal_mutable_access_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.access_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearn_AccessData>(GetArenaForAllocation());
    _impl_.access_data_ = p;
  }
  return _impl_.access_data_;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_SnapshotProject_Request::mutable_access_data() {
  ::CMsgSteamLearn_AccessData* _msg = _internal_mutable_access_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_SnapshotProject_Request.access_data)
  return _msg;
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.access_data_;
  }
  if (access_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(access_data);
    if (message_arena != submessage_arena) {
      access_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.access_data_ = access_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_SnapshotProject_Request.access_data)
}

// optional uint32 project_id = 3;
inline bool CMsgSteamLearn_SnapshotProject_Request::_internal_has_project_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Request::has_project_id() const {
  return _internal_has_project_id();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_project_id() {
  _impl_.project_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::_internal_project_id() const {
  return _impl_.project_id_;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::project_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.project_id)
  return _internal_project_id();
}
inline void CMsgSteamLearn_SnapshotProject_Request::_internal_set_project_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.project_id_ = value;
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_project_id(uint32_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Request.project_id)
}

// optional uint32 published_version = 7;
inline bool CMsgSteamLearn_SnapshotProject_Request::_internal_has_published_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Request::has_published_version() const {
  return _internal_has_published_version();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_published_version() {
  _impl_.published_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::_internal_published_version() const {
  return _impl_.published_version_;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::published_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.published_version)
  return _internal_published_version();
}
inline void CMsgSteamLearn_SnapshotProject_Request::_internal_set_published_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.published_version_ = value;
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_published_version(uint32_t value) {
  _internal_set_published_version(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Request.published_version)
}

// repeated uint64 keys = 4;
inline int CMsgSteamLearn_SnapshotProject_Request::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int CMsgSteamLearn_SnapshotProject_Request::keys_size() const {
  return _internal_keys_size();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_keys() {
  _impl_.keys_.Clear();
}
inline uint64_t CMsgSteamLearn_SnapshotProject_Request::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline uint64_t CMsgSteamLearn_SnapshotProject_Request::keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.keys)
  return _internal_keys(index);
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_keys(int index, uint64_t value) {
  _impl_.keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Request.keys)
}
inline void CMsgSteamLearn_SnapshotProject_Request::_internal_add_keys(uint64_t value) {
  _impl_.keys_.Add(value);
}
inline void CMsgSteamLearn_SnapshotProject_Request::add_keys(uint64_t value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_SnapshotProject_Request.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSteamLearn_SnapshotProject_Request::_internal_keys() const {
  return _impl_.keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSteamLearn_SnapshotProject_Request::keys() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_SnapshotProject_Request.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSteamLearn_SnapshotProject_Request::_internal_mutable_keys() {
  return &_impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSteamLearn_SnapshotProject_Request::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_SnapshotProject_Request.keys)
  return _internal_mutable_keys();
}

// repeated .CMsgSteamLearnData data = 5;
inline int CMsgSteamLearn_SnapshotProject_Request::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CMsgSteamLearn_SnapshotProject_Request::data_size() const {
  return _internal_data_size();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_data() {
  _impl_.data_.Clear();
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_SnapshotProject_Request::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_SnapshotProject_Request.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >*
CMsgSteamLearn_SnapshotProject_Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_SnapshotProject_Request.data)
  return &_impl_.data_;
}
inline const ::CMsgSteamLearnData& CMsgSteamLearn_SnapshotProject_Request::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::CMsgSteamLearnData& CMsgSteamLearn_SnapshotProject_Request::data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.data)
  return _internal_data(index);
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_SnapshotProject_Request::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::CMsgSteamLearnData* CMsgSteamLearn_SnapshotProject_Request::add_data() {
  ::CMsgSteamLearnData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_SnapshotProject_Request.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnData >&
CMsgSteamLearn_SnapshotProject_Request::data() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_SnapshotProject_Request.data)
  return _impl_.data_;
}

// optional uint32 pending_data_limit_seconds = 6;
inline bool CMsgSteamLearn_SnapshotProject_Request::_internal_has_pending_data_limit_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Request::has_pending_data_limit_seconds() const {
  return _internal_has_pending_data_limit_seconds();
}
inline void CMsgSteamLearn_SnapshotProject_Request::clear_pending_data_limit_seconds() {
  _impl_.pending_data_limit_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::_internal_pending_data_limit_seconds() const {
  return _impl_.pending_data_limit_seconds_;
}
inline uint32_t CMsgSteamLearn_SnapshotProject_Request::pending_data_limit_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Request.pending_data_limit_seconds)
  return _internal_pending_data_limit_seconds();
}
inline void CMsgSteamLearn_SnapshotProject_Request::_internal_set_pending_data_limit_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pending_data_limit_seconds_ = value;
}
inline void CMsgSteamLearn_SnapshotProject_Request::set_pending_data_limit_seconds(uint32_t value) {
  _internal_set_pending_data_limit_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Request.pending_data_limit_seconds)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_SnapshotProject_Response

// optional .ESteamLearnSnapshotProjectResult snapshot_result = 1;
inline bool CMsgSteamLearn_SnapshotProject_Response::_internal_has_snapshot_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_SnapshotProject_Response::has_snapshot_result() const {
  return _internal_has_snapshot_result();
}
inline void CMsgSteamLearn_SnapshotProject_Response::clear_snapshot_result() {
  _impl_.snapshot_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ESteamLearnSnapshotProjectResult CMsgSteamLearn_SnapshotProject_Response::_internal_snapshot_result() const {
  return static_cast< ::ESteamLearnSnapshotProjectResult >(_impl_.snapshot_result_);
}
inline ::ESteamLearnSnapshotProjectResult CMsgSteamLearn_SnapshotProject_Response::snapshot_result() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_SnapshotProject_Response.snapshot_result)
  return _internal_snapshot_result();
}
inline void CMsgSteamLearn_SnapshotProject_Response::_internal_set_snapshot_result(::ESteamLearnSnapshotProjectResult value) {
  assert(::ESteamLearnSnapshotProjectResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.snapshot_result_ = value;
}
inline void CMsgSteamLearn_SnapshotProject_Response::set_snapshot_result(::ESteamLearnSnapshotProjectResult value) {
  _internal_set_snapshot_result(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_SnapshotProject_Response.snapshot_result)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_BatchOperation_Request

// repeated .CMsgSteamLearn_CacheData_Request cache_data_requests = 1;
inline int CMsgSteamLearn_BatchOperation_Request::_internal_cache_data_requests_size() const {
  return _impl_.cache_data_requests_.size();
}
inline int CMsgSteamLearn_BatchOperation_Request::cache_data_requests_size() const {
  return _internal_cache_data_requests_size();
}
inline void CMsgSteamLearn_BatchOperation_Request::clear_cache_data_requests() {
  _impl_.cache_data_requests_.Clear();
}
inline ::CMsgSteamLearn_CacheData_Request* CMsgSteamLearn_BatchOperation_Request::mutable_cache_data_requests(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_BatchOperation_Request.cache_data_requests)
  return _impl_.cache_data_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Request >*
CMsgSteamLearn_BatchOperation_Request::mutable_cache_data_requests() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_BatchOperation_Request.cache_data_requests)
  return &_impl_.cache_data_requests_;
}
inline const ::CMsgSteamLearn_CacheData_Request& CMsgSteamLearn_BatchOperation_Request::_internal_cache_data_requests(int index) const {
  return _impl_.cache_data_requests_.Get(index);
}
inline const ::CMsgSteamLearn_CacheData_Request& CMsgSteamLearn_BatchOperation_Request::cache_data_requests(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_BatchOperation_Request.cache_data_requests)
  return _internal_cache_data_requests(index);
}
inline ::CMsgSteamLearn_CacheData_Request* CMsgSteamLearn_BatchOperation_Request::_internal_add_cache_data_requests() {
  return _impl_.cache_data_requests_.Add();
}
inline ::CMsgSteamLearn_CacheData_Request* CMsgSteamLearn_BatchOperation_Request::add_cache_data_requests() {
  ::CMsgSteamLearn_CacheData_Request* _add = _internal_add_cache_data_requests();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_BatchOperation_Request.cache_data_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Request >&
CMsgSteamLearn_BatchOperation_Request::cache_data_requests() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_BatchOperation_Request.cache_data_requests)
  return _impl_.cache_data_requests_;
}

// repeated .CMsgSteamLearn_SnapshotProject_Request snapshot_requests = 2;
inline int CMsgSteamLearn_BatchOperation_Request::_internal_snapshot_requests_size() const {
  return _impl_.snapshot_requests_.size();
}
inline int CMsgSteamLearn_BatchOperation_Request::snapshot_requests_size() const {
  return _internal_snapshot_requests_size();
}
inline void CMsgSteamLearn_BatchOperation_Request::clear_snapshot_requests() {
  _impl_.snapshot_requests_.Clear();
}
inline ::CMsgSteamLearn_SnapshotProject_Request* CMsgSteamLearn_BatchOperation_Request::mutable_snapshot_requests(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_BatchOperation_Request.snapshot_requests)
  return _impl_.snapshot_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Request >*
CMsgSteamLearn_BatchOperation_Request::mutable_snapshot_requests() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_BatchOperation_Request.snapshot_requests)
  return &_impl_.snapshot_requests_;
}
inline const ::CMsgSteamLearn_SnapshotProject_Request& CMsgSteamLearn_BatchOperation_Request::_internal_snapshot_requests(int index) const {
  return _impl_.snapshot_requests_.Get(index);
}
inline const ::CMsgSteamLearn_SnapshotProject_Request& CMsgSteamLearn_BatchOperation_Request::snapshot_requests(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_BatchOperation_Request.snapshot_requests)
  return _internal_snapshot_requests(index);
}
inline ::CMsgSteamLearn_SnapshotProject_Request* CMsgSteamLearn_BatchOperation_Request::_internal_add_snapshot_requests() {
  return _impl_.snapshot_requests_.Add();
}
inline ::CMsgSteamLearn_SnapshotProject_Request* CMsgSteamLearn_BatchOperation_Request::add_snapshot_requests() {
  ::CMsgSteamLearn_SnapshotProject_Request* _add = _internal_add_snapshot_requests();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_BatchOperation_Request.snapshot_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Request >&
CMsgSteamLearn_BatchOperation_Request::snapshot_requests() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_BatchOperation_Request.snapshot_requests)
  return _impl_.snapshot_requests_;
}

// -------------------------------------------------------------------

// CMsgSteamLearn_BatchOperation_Response

// repeated .CMsgSteamLearn_CacheData_Response cache_data_responses = 1;
inline int CMsgSteamLearn_BatchOperation_Response::_internal_cache_data_responses_size() const {
  return _impl_.cache_data_responses_.size();
}
inline int CMsgSteamLearn_BatchOperation_Response::cache_data_responses_size() const {
  return _internal_cache_data_responses_size();
}
inline void CMsgSteamLearn_BatchOperation_Response::clear_cache_data_responses() {
  _impl_.cache_data_responses_.Clear();
}
inline ::CMsgSteamLearn_CacheData_Response* CMsgSteamLearn_BatchOperation_Response::mutable_cache_data_responses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_BatchOperation_Response.cache_data_responses)
  return _impl_.cache_data_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Response >*
CMsgSteamLearn_BatchOperation_Response::mutable_cache_data_responses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_BatchOperation_Response.cache_data_responses)
  return &_impl_.cache_data_responses_;
}
inline const ::CMsgSteamLearn_CacheData_Response& CMsgSteamLearn_BatchOperation_Response::_internal_cache_data_responses(int index) const {
  return _impl_.cache_data_responses_.Get(index);
}
inline const ::CMsgSteamLearn_CacheData_Response& CMsgSteamLearn_BatchOperation_Response::cache_data_responses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_BatchOperation_Response.cache_data_responses)
  return _internal_cache_data_responses(index);
}
inline ::CMsgSteamLearn_CacheData_Response* CMsgSteamLearn_BatchOperation_Response::_internal_add_cache_data_responses() {
  return _impl_.cache_data_responses_.Add();
}
inline ::CMsgSteamLearn_CacheData_Response* CMsgSteamLearn_BatchOperation_Response::add_cache_data_responses() {
  ::CMsgSteamLearn_CacheData_Response* _add = _internal_add_cache_data_responses();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_BatchOperation_Response.cache_data_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_CacheData_Response >&
CMsgSteamLearn_BatchOperation_Response::cache_data_responses() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_BatchOperation_Response.cache_data_responses)
  return _impl_.cache_data_responses_;
}

// repeated .CMsgSteamLearn_SnapshotProject_Response snapshot_responses = 2;
inline int CMsgSteamLearn_BatchOperation_Response::_internal_snapshot_responses_size() const {
  return _impl_.snapshot_responses_.size();
}
inline int CMsgSteamLearn_BatchOperation_Response::snapshot_responses_size() const {
  return _internal_snapshot_responses_size();
}
inline void CMsgSteamLearn_BatchOperation_Response::clear_snapshot_responses() {
  _impl_.snapshot_responses_.Clear();
}
inline ::CMsgSteamLearn_SnapshotProject_Response* CMsgSteamLearn_BatchOperation_Response::mutable_snapshot_responses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_BatchOperation_Response.snapshot_responses)
  return _impl_.snapshot_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Response >*
CMsgSteamLearn_BatchOperation_Response::mutable_snapshot_responses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_BatchOperation_Response.snapshot_responses)
  return &_impl_.snapshot_responses_;
}
inline const ::CMsgSteamLearn_SnapshotProject_Response& CMsgSteamLearn_BatchOperation_Response::_internal_snapshot_responses(int index) const {
  return _impl_.snapshot_responses_.Get(index);
}
inline const ::CMsgSteamLearn_SnapshotProject_Response& CMsgSteamLearn_BatchOperation_Response::snapshot_responses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_BatchOperation_Response.snapshot_responses)
  return _internal_snapshot_responses(index);
}
inline ::CMsgSteamLearn_SnapshotProject_Response* CMsgSteamLearn_BatchOperation_Response::_internal_add_snapshot_responses() {
  return _impl_.snapshot_responses_.Add();
}
inline ::CMsgSteamLearn_SnapshotProject_Response* CMsgSteamLearn_BatchOperation_Response::add_snapshot_responses() {
  ::CMsgSteamLearn_SnapshotProject_Response* _add = _internal_add_snapshot_responses();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_BatchOperation_Response.snapshot_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_SnapshotProject_Response >&
CMsgSteamLearn_BatchOperation_Response::snapshot_responses() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_BatchOperation_Response.snapshot_responses)
  return _impl_.snapshot_responses_;
}

// -------------------------------------------------------------------

// CMsgSteamLearnHMACKeys_CacheDataKeys

// optional uint32 data_source_id = 1;
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_has_data_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::has_data_source_id() const {
  return _internal_has_data_source_id();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::clear_data_source_id() {
  _impl_.data_source_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_data_source_id() const {
  return _impl_.data_source_id_;
}
inline uint32_t CMsgSteamLearnHMACKeys_CacheDataKeys::data_source_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.CacheDataKeys.data_source_id)
  return _internal_data_source_id();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_set_data_source_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_source_id_ = value;
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::set_data_source_id(uint32_t value) {
  _internal_set_data_source_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.CacheDataKeys.data_source_id)
}

// optional uint32 version = 3;
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::has_version() const {
  return _internal_has_version();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CMsgSteamLearnHMACKeys_CacheDataKeys::version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.CacheDataKeys.version)
  return _internal_version();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_ = value;
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.CacheDataKeys.version)
}

// optional string key = 2;
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_CacheDataKeys::has_key() const {
  return _internal_has_key();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnHMACKeys_CacheDataKeys::key() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.CacheDataKeys.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnHMACKeys_CacheDataKeys::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.CacheDataKeys.key)
}
inline std::string* CMsgSteamLearnHMACKeys_CacheDataKeys::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnHMACKeys.CacheDataKeys.key)
  return _s;
}
inline const std::string& CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys_CacheDataKeys::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys_CacheDataKeys::release_key() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnHMACKeys.CacheDataKeys.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnHMACKeys_CacheDataKeys::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnHMACKeys.CacheDataKeys.key)
}

// -------------------------------------------------------------------

// CMsgSteamLearnHMACKeys_SnapshotProjectKeys

// optional uint32 project_id = 1;
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_has_project_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::has_project_id() const {
  return _internal_has_project_id();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::clear_project_id() {
  _impl_.project_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_project_id() const {
  return _impl_.project_id_;
}
inline uint32_t CMsgSteamLearnHMACKeys_SnapshotProjectKeys::project_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.project_id)
  return _internal_project_id();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_set_project_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.project_id_ = value;
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::set_project_id(uint32_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.project_id)
}

// optional uint32 published_version = 3;
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_has_published_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::has_published_version() const {
  return _internal_has_published_version();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::clear_published_version() {
  _impl_.published_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_published_version() const {
  return _impl_.published_version_;
}
inline uint32_t CMsgSteamLearnHMACKeys_SnapshotProjectKeys::published_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.published_version)
  return _internal_published_version();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_set_published_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.published_version_ = value;
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::set_published_version(uint32_t value) {
  _internal_set_published_version(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.published_version)
}

// optional string key = 2;
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys_SnapshotProjectKeys::has_key() const {
  return _internal_has_key();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnHMACKeys_SnapshotProjectKeys::key() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.key)
}
inline std::string* CMsgSteamLearnHMACKeys_SnapshotProjectKeys::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.key)
  return _s;
}
inline const std::string& CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys_SnapshotProjectKeys::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys_SnapshotProjectKeys::release_key() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnHMACKeys_SnapshotProjectKeys::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnHMACKeys.SnapshotProjectKeys.key)
}

// -------------------------------------------------------------------

// CMsgSteamLearnHMACKeys

// optional string register_data_source_key = 1;
inline bool CMsgSteamLearnHMACKeys::_internal_has_register_data_source_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnHMACKeys::has_register_data_source_key() const {
  return _internal_has_register_data_source_key();
}
inline void CMsgSteamLearnHMACKeys::clear_register_data_source_key() {
  _impl_.register_data_source_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearnHMACKeys::register_data_source_key() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.register_data_source_key)
  return _internal_register_data_source_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearnHMACKeys::set_register_data_source_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.register_data_source_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearnHMACKeys.register_data_source_key)
}
inline std::string* CMsgSteamLearnHMACKeys::mutable_register_data_source_key() {
  std::string* _s = _internal_mutable_register_data_source_key();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnHMACKeys.register_data_source_key)
  return _s;
}
inline const std::string& CMsgSteamLearnHMACKeys::_internal_register_data_source_key() const {
  return _impl_.register_data_source_key_.Get();
}
inline void CMsgSteamLearnHMACKeys::_internal_set_register_data_source_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.register_data_source_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys::_internal_mutable_register_data_source_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.register_data_source_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearnHMACKeys::release_register_data_source_key() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnHMACKeys.register_data_source_key)
  if (!_internal_has_register_data_source_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.register_data_source_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.register_data_source_key_.IsDefault()) {
    _impl_.register_data_source_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearnHMACKeys::set_allocated_register_data_source_key(std::string* register_data_source_key) {
  if (register_data_source_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.register_data_source_key_.SetAllocated(register_data_source_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.register_data_source_key_.IsDefault()) {
    _impl_.register_data_source_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnHMACKeys.register_data_source_key)
}

// repeated .CMsgSteamLearnHMACKeys.CacheDataKeys cache_data_keys = 2;
inline int CMsgSteamLearnHMACKeys::_internal_cache_data_keys_size() const {
  return _impl_.cache_data_keys_.size();
}
inline int CMsgSteamLearnHMACKeys::cache_data_keys_size() const {
  return _internal_cache_data_keys_size();
}
inline void CMsgSteamLearnHMACKeys::clear_cache_data_keys() {
  _impl_.cache_data_keys_.Clear();
}
inline ::CMsgSteamLearnHMACKeys_CacheDataKeys* CMsgSteamLearnHMACKeys::mutable_cache_data_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnHMACKeys.cache_data_keys)
  return _impl_.cache_data_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_CacheDataKeys >*
CMsgSteamLearnHMACKeys::mutable_cache_data_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnHMACKeys.cache_data_keys)
  return &_impl_.cache_data_keys_;
}
inline const ::CMsgSteamLearnHMACKeys_CacheDataKeys& CMsgSteamLearnHMACKeys::_internal_cache_data_keys(int index) const {
  return _impl_.cache_data_keys_.Get(index);
}
inline const ::CMsgSteamLearnHMACKeys_CacheDataKeys& CMsgSteamLearnHMACKeys::cache_data_keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.cache_data_keys)
  return _internal_cache_data_keys(index);
}
inline ::CMsgSteamLearnHMACKeys_CacheDataKeys* CMsgSteamLearnHMACKeys::_internal_add_cache_data_keys() {
  return _impl_.cache_data_keys_.Add();
}
inline ::CMsgSteamLearnHMACKeys_CacheDataKeys* CMsgSteamLearnHMACKeys::add_cache_data_keys() {
  ::CMsgSteamLearnHMACKeys_CacheDataKeys* _add = _internal_add_cache_data_keys();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnHMACKeys.cache_data_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_CacheDataKeys >&
CMsgSteamLearnHMACKeys::cache_data_keys() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnHMACKeys.cache_data_keys)
  return _impl_.cache_data_keys_;
}

// repeated .CMsgSteamLearnHMACKeys.SnapshotProjectKeys snapshot_project_keys = 3;
inline int CMsgSteamLearnHMACKeys::_internal_snapshot_project_keys_size() const {
  return _impl_.snapshot_project_keys_.size();
}
inline int CMsgSteamLearnHMACKeys::snapshot_project_keys_size() const {
  return _internal_snapshot_project_keys_size();
}
inline void CMsgSteamLearnHMACKeys::clear_snapshot_project_keys() {
  _impl_.snapshot_project_keys_.Clear();
}
inline ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* CMsgSteamLearnHMACKeys::mutable_snapshot_project_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnHMACKeys.snapshot_project_keys)
  return _impl_.snapshot_project_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys >*
CMsgSteamLearnHMACKeys::mutable_snapshot_project_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnHMACKeys.snapshot_project_keys)
  return &_impl_.snapshot_project_keys_;
}
inline const ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys& CMsgSteamLearnHMACKeys::_internal_snapshot_project_keys(int index) const {
  return _impl_.snapshot_project_keys_.Get(index);
}
inline const ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys& CMsgSteamLearnHMACKeys::snapshot_project_keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnHMACKeys.snapshot_project_keys)
  return _internal_snapshot_project_keys(index);
}
inline ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* CMsgSteamLearnHMACKeys::_internal_add_snapshot_project_keys() {
  return _impl_.snapshot_project_keys_.Add();
}
inline ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* CMsgSteamLearnHMACKeys::add_snapshot_project_keys() {
  ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys* _add = _internal_add_snapshot_project_keys();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnHMACKeys.snapshot_project_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnHMACKeys_SnapshotProjectKeys >&
CMsgSteamLearnHMACKeys::snapshot_project_keys() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnHMACKeys.snapshot_project_keys)
  return _impl_.snapshot_project_keys_;
}

// -------------------------------------------------------------------

// CMsgSteamLearn_GetHMACKeys_Request

// optional uint32 appid = 1;
inline bool CMsgSteamLearn_GetHMACKeys_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_GetHMACKeys_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgSteamLearn_GetHMACKeys_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearn_GetHMACKeys_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgSteamLearn_GetHMACKeys_Request::appid() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_GetHMACKeys_Request.appid)
  return _internal_appid();
}
inline void CMsgSteamLearn_GetHMACKeys_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.appid_ = value;
}
inline void CMsgSteamLearn_GetHMACKeys_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_GetHMACKeys_Request.appid)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_GetHMACKeys_Response

// optional .ESteamLearnGetHMACKeysResult result = 1;
inline bool CMsgSteamLearn_GetHMACKeys_Response::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearn_GetHMACKeys_Response::has_result() const {
  return _internal_has_result();
}
inline void CMsgSteamLearn_GetHMACKeys_Response::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ESteamLearnGetHMACKeysResult CMsgSteamLearn_GetHMACKeys_Response::_internal_result() const {
  return static_cast< ::ESteamLearnGetHMACKeysResult >(_impl_.result_);
}
inline ::ESteamLearnGetHMACKeysResult CMsgSteamLearn_GetHMACKeys_Response::result() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_GetHMACKeys_Response.result)
  return _internal_result();
}
inline void CMsgSteamLearn_GetHMACKeys_Response::_internal_set_result(::ESteamLearnGetHMACKeysResult value) {
  assert(::ESteamLearnGetHMACKeysResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_ = value;
}
inline void CMsgSteamLearn_GetHMACKeys_Response::set_result(::ESteamLearnGetHMACKeysResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_GetHMACKeys_Response.result)
}

// optional .CMsgSteamLearnHMACKeys keys = 2;
inline bool CMsgSteamLearn_GetHMACKeys_Response::_internal_has_keys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.keys_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_GetHMACKeys_Response::has_keys() const {
  return _internal_has_keys();
}
inline void CMsgSteamLearn_GetHMACKeys_Response::clear_keys() {
  if (_impl_.keys_ != nullptr) _impl_.keys_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamLearnHMACKeys& CMsgSteamLearn_GetHMACKeys_Response::_internal_keys() const {
  const ::CMsgSteamLearnHMACKeys* p = _impl_.keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnHMACKeys&>(
      ::_CMsgSteamLearnHMACKeys_default_instance_);
}
inline const ::CMsgSteamLearnHMACKeys& CMsgSteamLearn_GetHMACKeys_Response::keys() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_GetHMACKeys_Response.keys)
  return _internal_keys();
}
inline void CMsgSteamLearn_GetHMACKeys_Response::unsafe_arena_set_allocated_keys(
    ::CMsgSteamLearnHMACKeys* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  _impl_.keys_ = keys;
  if (keys) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_GetHMACKeys_Response.keys)
}
inline ::CMsgSteamLearnHMACKeys* CMsgSteamLearn_GetHMACKeys_Response::release_keys() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnHMACKeys* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnHMACKeys* CMsgSteamLearn_GetHMACKeys_Response::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_GetHMACKeys_Response.keys)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnHMACKeys* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnHMACKeys* CMsgSteamLearn_GetHMACKeys_Response::_internal_mutable_keys() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnHMACKeys>(GetArenaForAllocation());
    _impl_.keys_ = p;
  }
  return _impl_.keys_;
}
inline ::CMsgSteamLearnHMACKeys* CMsgSteamLearn_GetHMACKeys_Response::mutable_keys() {
  ::CMsgSteamLearnHMACKeys* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_GetHMACKeys_Response.keys)
  return _msg;
}
inline void CMsgSteamLearn_GetHMACKeys_Response::set_allocated_keys(::CMsgSteamLearnHMACKeys* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.keys_;
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keys);
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_GetHMACKeys_Response.keys)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_Inference_Request

// optional string access_token = 1;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_access_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_access_token() const {
  return _internal_has_access_token();
}
inline void CMsgSteamLearn_Inference_Request::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamLearn_Inference_Request::access_token() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSteamLearn_Inference_Request::set_access_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Request.access_token)
}
inline std::string* CMsgSteamLearn_Inference_Request::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_Inference_Request.access_token)
  return _s;
}
inline const std::string& CMsgSteamLearn_Inference_Request::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void CMsgSteamLearn_Inference_Request::_internal_set_access_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_Inference_Request::_internal_mutable_access_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSteamLearn_Inference_Request::release_access_token() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_Inference_Request.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSteamLearn_Inference_Request::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_Inference_Request.access_token)
}

// optional .CMsgSteamLearn_AccessData access_data = 2;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_access_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.access_data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_access_data() const {
  return _internal_has_access_data();
}
inline void CMsgSteamLearn_Inference_Request::clear_access_data() {
  if (_impl_.access_data_ != nullptr) _impl_.access_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_Inference_Request::_internal_access_data() const {
  const ::CMsgSteamLearn_AccessData* p = _impl_.access_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearn_AccessData&>(
      ::_CMsgSteamLearn_AccessData_default_instance_);
}
inline const ::CMsgSteamLearn_AccessData& CMsgSteamLearn_Inference_Request::access_data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.access_data)
  return _internal_access_data();
}
inline void CMsgSteamLearn_Inference_Request::unsafe_arena_set_allocated_access_data(
    ::CMsgSteamLearn_AccessData* access_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.access_data_);
  }
  _impl_.access_data_ = access_data;
  if (access_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_Inference_Request.access_data)
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_Inference_Request::release_access_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_Inference_Request::unsafe_arena_release_access_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_Inference_Request.access_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearn_AccessData* temp = _impl_.access_data_;
  _impl_.access_data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_Inference_Request::_internal_mutable_access_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.access_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearn_AccessData>(GetArenaForAllocation());
    _impl_.access_data_ = p;
  }
  return _impl_.access_data_;
}
inline ::CMsgSteamLearn_AccessData* CMsgSteamLearn_Inference_Request::mutable_access_data() {
  ::CMsgSteamLearn_AccessData* _msg = _internal_mutable_access_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_Inference_Request.access_data)
  return _msg;
}
inline void CMsgSteamLearn_Inference_Request::set_allocated_access_data(::CMsgSteamLearn_AccessData* access_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.access_data_;
  }
  if (access_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(access_data);
    if (message_arena != submessage_arena) {
      access_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.access_data_ = access_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_Inference_Request.access_data)
}

// optional uint32 project_id = 3;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_project_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_project_id() const {
  return _internal_has_project_id();
}
inline void CMsgSteamLearn_Inference_Request::clear_project_id() {
  _impl_.project_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearn_Inference_Request::_internal_project_id() const {
  return _impl_.project_id_;
}
inline uint32_t CMsgSteamLearn_Inference_Request::project_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.project_id)
  return _internal_project_id();
}
inline void CMsgSteamLearn_Inference_Request::_internal_set_project_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.project_id_ = value;
}
inline void CMsgSteamLearn_Inference_Request::set_project_id(uint32_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Request.project_id)
}

// optional uint32 published_version = 4;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_published_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_published_version() const {
  return _internal_has_published_version();
}
inline void CMsgSteamLearn_Inference_Request::clear_published_version() {
  _impl_.published_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearn_Inference_Request::_internal_published_version() const {
  return _impl_.published_version_;
}
inline uint32_t CMsgSteamLearn_Inference_Request::published_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.published_version)
  return _internal_published_version();
}
inline void CMsgSteamLearn_Inference_Request::_internal_set_published_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.published_version_ = value;
}
inline void CMsgSteamLearn_Inference_Request::set_published_version(uint32_t value) {
  _internal_set_published_version(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Request.published_version)
}

// optional uint32 override_train_id = 5;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_override_train_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_override_train_id() const {
  return _internal_has_override_train_id();
}
inline void CMsgSteamLearn_Inference_Request::clear_override_train_id() {
  _impl_.override_train_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSteamLearn_Inference_Request::_internal_override_train_id() const {
  return _impl_.override_train_id_;
}
inline uint32_t CMsgSteamLearn_Inference_Request::override_train_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.override_train_id)
  return _internal_override_train_id();
}
inline void CMsgSteamLearn_Inference_Request::_internal_set_override_train_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.override_train_id_ = value;
}
inline void CMsgSteamLearn_Inference_Request::set_override_train_id(uint32_t value) {
  _internal_set_override_train_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Request.override_train_id)
}

// optional .CMsgSteamLearnDataList data = 6;
inline bool CMsgSteamLearn_Inference_Request::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_Inference_Request::has_data() const {
  return _internal_has_data();
}
inline void CMsgSteamLearn_Inference_Request::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamLearnDataList& CMsgSteamLearn_Inference_Request::_internal_data() const {
  const ::CMsgSteamLearnDataList* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnDataList&>(
      ::_CMsgSteamLearnDataList_default_instance_);
}
inline const ::CMsgSteamLearnDataList& CMsgSteamLearn_Inference_Request::data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.data)
  return _internal_data();
}
inline void CMsgSteamLearn_Inference_Request::unsafe_arena_set_allocated_data(
    ::CMsgSteamLearnDataList* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_Inference_Request.data)
}
inline ::CMsgSteamLearnDataList* CMsgSteamLearn_Inference_Request::release_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataList* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnDataList* CMsgSteamLearn_Inference_Request::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_Inference_Request.data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamLearnDataList* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnDataList* CMsgSteamLearn_Inference_Request::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnDataList>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgSteamLearnDataList* CMsgSteamLearn_Inference_Request::mutable_data() {
  ::CMsgSteamLearnDataList* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_Inference_Request.data)
  return _msg;
}
inline void CMsgSteamLearn_Inference_Request::set_allocated_data(::CMsgSteamLearnDataList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_Inference_Request.data)
}

// repeated float additional_data = 7;
inline int CMsgSteamLearn_Inference_Request::_internal_additional_data_size() const {
  return _impl_.additional_data_.size();
}
inline int CMsgSteamLearn_Inference_Request::additional_data_size() const {
  return _internal_additional_data_size();
}
inline void CMsgSteamLearn_Inference_Request::clear_additional_data() {
  _impl_.additional_data_.Clear();
}
inline float CMsgSteamLearn_Inference_Request::_internal_additional_data(int index) const {
  return _impl_.additional_data_.Get(index);
}
inline float CMsgSteamLearn_Inference_Request::additional_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Request.additional_data)
  return _internal_additional_data(index);
}
inline void CMsgSteamLearn_Inference_Request::set_additional_data(int index, float value) {
  _impl_.additional_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Request.additional_data)
}
inline void CMsgSteamLearn_Inference_Request::_internal_add_additional_data(float value) {
  _impl_.additional_data_.Add(value);
}
inline void CMsgSteamLearn_Inference_Request::add_additional_data(float value) {
  _internal_add_additional_data(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_Inference_Request.additional_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_Inference_Request::_internal_additional_data() const {
  return _impl_.additional_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_Inference_Request::additional_data() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_Inference_Request.additional_data)
  return _internal_additional_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_Inference_Request::_internal_mutable_additional_data() {
  return &_impl_.additional_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_Inference_Request::mutable_additional_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_Inference_Request.additional_data)
  return _internal_mutable_additional_data();
}

// -------------------------------------------------------------------

// CMsgSteamLearn_InferenceBackend_Response_Output

// .CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput binary_crossentropy = 1;
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::_internal_has_binary_crossentropy() const {
  return ResponseType_case() == kBinaryCrossentropy;
}
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::has_binary_crossentropy() const {
  return _internal_has_binary_crossentropy();
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::set_has_binary_crossentropy() {
  _impl_._oneof_case_[0] = kBinaryCrossentropy;
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::clear_binary_crossentropy() {
  if (_internal_has_binary_crossentropy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ResponseType_.binary_crossentropy_;
    }
    clear_has_ResponseType();
  }
}
inline ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::release_binary_crossentropy() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy)
  if (_internal_has_binary_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* temp = _impl_.ResponseType_.binary_crossentropy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ResponseType_.binary_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::_internal_binary_crossentropy() const {
  return _internal_has_binary_crossentropy()
      ? *_impl_.ResponseType_.binary_crossentropy_
      : reinterpret_cast< ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput&>(::_CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput_default_instance_);
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::binary_crossentropy() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy)
  return _internal_binary_crossentropy();
}
inline ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_release_binary_crossentropy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy)
  if (_internal_has_binary_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* temp = _impl_.ResponseType_.binary_crossentropy_;
    _impl_.ResponseType_.binary_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_set_allocated_binary_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* binary_crossentropy) {
  clear_ResponseType();
  if (binary_crossentropy) {
    set_has_binary_crossentropy();
    _impl_.ResponseType_.binary_crossentropy_ = binary_crossentropy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy)
}
inline ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::_internal_mutable_binary_crossentropy() {
  if (!_internal_has_binary_crossentropy()) {
    clear_ResponseType();
    set_has_binary_crossentropy();
    _impl_.ResponseType_.binary_crossentropy_ = CreateMaybeMessage< ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput >(GetArenaForAllocation());
  }
  return _impl_.ResponseType_.binary_crossentropy_;
}
inline ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::mutable_binary_crossentropy() {
  ::CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput* _msg = _internal_mutable_binary_crossentropy();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy)
  return _msg;
}

// .CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput categorical_crossentropy = 2;
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::_internal_has_categorical_crossentropy() const {
  return ResponseType_case() == kCategoricalCrossentropy;
}
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::has_categorical_crossentropy() const {
  return _internal_has_categorical_crossentropy();
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::set_has_categorical_crossentropy() {
  _impl_._oneof_case_[0] = kCategoricalCrossentropy;
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::clear_categorical_crossentropy() {
  if (_internal_has_categorical_crossentropy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ResponseType_.categorical_crossentropy_;
    }
    clear_has_ResponseType();
  }
}
inline ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::release_categorical_crossentropy() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy)
  if (_internal_has_categorical_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* temp = _impl_.ResponseType_.categorical_crossentropy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ResponseType_.categorical_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::_internal_categorical_crossentropy() const {
  return _internal_has_categorical_crossentropy()
      ? *_impl_.ResponseType_.categorical_crossentropy_
      : reinterpret_cast< ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput&>(::_CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput_default_instance_);
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::categorical_crossentropy() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy)
  return _internal_categorical_crossentropy();
}
inline ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_release_categorical_crossentropy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy)
  if (_internal_has_categorical_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* temp = _impl_.ResponseType_.categorical_crossentropy_;
    _impl_.ResponseType_.categorical_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_set_allocated_categorical_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* categorical_crossentropy) {
  clear_ResponseType();
  if (categorical_crossentropy) {
    set_has_categorical_crossentropy();
    _impl_.ResponseType_.categorical_crossentropy_ = categorical_crossentropy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy)
}
inline ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::_internal_mutable_categorical_crossentropy() {
  if (!_internal_has_categorical_crossentropy()) {
    clear_ResponseType();
    set_has_categorical_crossentropy();
    _impl_.ResponseType_.categorical_crossentropy_ = CreateMaybeMessage< ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput >(GetArenaForAllocation());
  }
  return _impl_.ResponseType_.categorical_crossentropy_;
}
inline ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::mutable_categorical_crossentropy() {
  ::CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput* _msg = _internal_mutable_categorical_crossentropy();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy)
  return _msg;
}

// .CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput multi_binary_crossentropy = 3;
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::_internal_has_multi_binary_crossentropy() const {
  return ResponseType_case() == kMultiBinaryCrossentropy;
}
inline bool CMsgSteamLearn_InferenceBackend_Response_Output::has_multi_binary_crossentropy() const {
  return _internal_has_multi_binary_crossentropy();
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::set_has_multi_binary_crossentropy() {
  _impl_._oneof_case_[0] = kMultiBinaryCrossentropy;
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::clear_multi_binary_crossentropy() {
  if (_internal_has_multi_binary_crossentropy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ResponseType_.multi_binary_crossentropy_;
    }
    clear_has_ResponseType();
  }
}
inline ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::release_multi_binary_crossentropy() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy)
  if (_internal_has_multi_binary_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* temp = _impl_.ResponseType_.multi_binary_crossentropy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ResponseType_.multi_binary_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::_internal_multi_binary_crossentropy() const {
  return _internal_has_multi_binary_crossentropy()
      ? *_impl_.ResponseType_.multi_binary_crossentropy_
      : reinterpret_cast< ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput&>(::_CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput_default_instance_);
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput& CMsgSteamLearn_InferenceBackend_Response_Output::multi_binary_crossentropy() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy)
  return _internal_multi_binary_crossentropy();
}
inline ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_release_multi_binary_crossentropy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy)
  if (_internal_has_multi_binary_crossentropy()) {
    clear_has_ResponseType();
    ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* temp = _impl_.ResponseType_.multi_binary_crossentropy_;
    _impl_.ResponseType_.multi_binary_crossentropy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::unsafe_arena_set_allocated_multi_binary_crossentropy(::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* multi_binary_crossentropy) {
  clear_ResponseType();
  if (multi_binary_crossentropy) {
    set_has_multi_binary_crossentropy();
    _impl_.ResponseType_.multi_binary_crossentropy_ = multi_binary_crossentropy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy)
}
inline ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::_internal_mutable_multi_binary_crossentropy() {
  if (!_internal_has_multi_binary_crossentropy()) {
    clear_ResponseType();
    set_has_multi_binary_crossentropy();
    _impl_.ResponseType_.multi_binary_crossentropy_ = CreateMaybeMessage< ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput >(GetArenaForAllocation());
  }
  return _impl_.ResponseType_.multi_binary_crossentropy_;
}
inline ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* CMsgSteamLearn_InferenceBackend_Response_Output::mutable_multi_binary_crossentropy() {
  ::CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput* _msg = _internal_mutable_multi_binary_crossentropy();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy)
  return _msg;
}

inline bool CMsgSteamLearn_InferenceBackend_Response_Output::has_ResponseType() const {
  return ResponseType_case() != RESPONSETYPE_NOT_SET;
}
inline void CMsgSteamLearn_InferenceBackend_Response_Output::clear_has_ResponseType() {
  _impl_._oneof_case_[0] = RESPONSETYPE_NOT_SET;
}
inline CMsgSteamLearn_InferenceBackend_Response_Output::ResponseTypeCase CMsgSteamLearn_InferenceBackend_Response_Output::ResponseType_case() const {
  return CMsgSteamLearn_InferenceBackend_Response_Output::ResponseTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput

// optional float value = 1;
inline bool CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::has_value() const {
  return _internal_has_value();
}
inline void CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::_internal_value() const {
  return _impl_.value_;
}
inline float CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::value() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput.value)
  return _internal_value();
}
inline void CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput.value)
}

// -------------------------------------------------------------------

// CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput

// repeated float weight = 1;
inline int CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_weight_size() const {
  return _impl_.weight_.size();
}
inline int CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::weight_size() const {
  return _internal_weight_size();
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::clear_weight() {
  _impl_.weight_.Clear();
}
inline float CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_weight(int index) const {
  return _impl_.weight_.Get(index);
}
inline float CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::weight(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.weight)
  return _internal_weight(index);
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::set_weight(int index, float value) {
  _impl_.weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.weight)
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_add_weight(float value) {
  _impl_.weight_.Add(value);
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_weight() const {
  return _impl_.weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::weight() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_mutable_weight() {
  return &_impl_.weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.weight)
  return _internal_mutable_weight();
}

// repeated float value = 2;
inline int CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::value_size() const {
  return _internal_value_size();
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::clear_value() {
  _impl_.value_.Clear();
}
inline float CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline float CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::value(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.value)
  return _internal_value(index);
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::set_value(int index, float value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.value)
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_add_value(float value) {
  _impl_.value_.Add(value);
}
inline void CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::value() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput

// repeated float weight = 1;
inline int CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_weight_size() const {
  return _impl_.weight_.size();
}
inline int CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::weight_size() const {
  return _internal_weight_size();
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::clear_weight() {
  _impl_.weight_.Clear();
}
inline float CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_weight(int index) const {
  return _impl_.weight_.Get(index);
}
inline float CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::weight(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.weight)
  return _internal_weight(index);
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::set_weight(int index, float value) {
  _impl_.weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.weight)
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_add_weight(float value) {
  _impl_.weight_.Add(value);
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_weight() const {
  return _impl_.weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::weight() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_mutable_weight() {
  return &_impl_.weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.weight)
  return _internal_mutable_weight();
}

// repeated float value = 2;
inline int CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::value_size() const {
  return _internal_value_size();
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::clear_value() {
  _impl_.value_.Clear();
}
inline float CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline float CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::value(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.value)
  return _internal_value(index);
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::set_value(int index, float value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.value)
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_add_value(float value) {
  _impl_.value_.Add(value);
}
inline void CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::value() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// CMsgSteamLearn_InferenceBackend_Response

// repeated .CMsgSteamLearn_InferenceBackend_Response.Output outputs = 1;
inline int CMsgSteamLearn_InferenceBackend_Response::_internal_outputs_size() const {
  return _impl_.outputs_.size();
}
inline int CMsgSteamLearn_InferenceBackend_Response::outputs_size() const {
  return _internal_outputs_size();
}
inline void CMsgSteamLearn_InferenceBackend_Response::clear_outputs() {
  _impl_.outputs_.Clear();
}
inline ::CMsgSteamLearn_InferenceBackend_Response_Output* CMsgSteamLearn_InferenceBackend_Response::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_InferenceBackend_Response.outputs)
  return _impl_.outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_InferenceBackend_Response_Output >*
CMsgSteamLearn_InferenceBackend_Response::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearn_InferenceBackend_Response.outputs)
  return &_impl_.outputs_;
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_Output& CMsgSteamLearn_InferenceBackend_Response::_internal_outputs(int index) const {
  return _impl_.outputs_.Get(index);
}
inline const ::CMsgSteamLearn_InferenceBackend_Response_Output& CMsgSteamLearn_InferenceBackend_Response::outputs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_InferenceBackend_Response.outputs)
  return _internal_outputs(index);
}
inline ::CMsgSteamLearn_InferenceBackend_Response_Output* CMsgSteamLearn_InferenceBackend_Response::_internal_add_outputs() {
  return _impl_.outputs_.Add();
}
inline ::CMsgSteamLearn_InferenceBackend_Response_Output* CMsgSteamLearn_InferenceBackend_Response::add_outputs() {
  ::CMsgSteamLearn_InferenceBackend_Response_Output* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:CMsgSteamLearn_InferenceBackend_Response.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearn_InferenceBackend_Response_Output >&
CMsgSteamLearn_InferenceBackend_Response::outputs() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearn_InferenceBackend_Response.outputs)
  return _impl_.outputs_;
}

// -------------------------------------------------------------------

// CMsgSteamLearn_Inference_Response

// optional .ESteamLearnInferenceResult inference_result = 1;
inline bool CMsgSteamLearn_Inference_Response::_internal_has_inference_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearn_Inference_Response::has_inference_result() const {
  return _internal_has_inference_result();
}
inline void CMsgSteamLearn_Inference_Response::clear_inference_result() {
  _impl_.inference_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ESteamLearnInferenceResult CMsgSteamLearn_Inference_Response::_internal_inference_result() const {
  return static_cast< ::ESteamLearnInferenceResult >(_impl_.inference_result_);
}
inline ::ESteamLearnInferenceResult CMsgSteamLearn_Inference_Response::inference_result() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Response.inference_result)
  return _internal_inference_result();
}
inline void CMsgSteamLearn_Inference_Response::_internal_set_inference_result(::ESteamLearnInferenceResult value) {
  assert(::ESteamLearnInferenceResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.inference_result_ = value;
}
inline void CMsgSteamLearn_Inference_Response::set_inference_result(::ESteamLearnInferenceResult value) {
  _internal_set_inference_result(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearn_Inference_Response.inference_result)
}

// optional .CMsgSteamLearn_InferenceBackend_Response backend_response = 2;
inline bool CMsgSteamLearn_Inference_Response::_internal_has_backend_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.backend_response_ != nullptr);
  return value;
}
inline bool CMsgSteamLearn_Inference_Response::has_backend_response() const {
  return _internal_has_backend_response();
}
inline void CMsgSteamLearn_Inference_Response::clear_backend_response() {
  if (_impl_.backend_response_ != nullptr) _impl_.backend_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamLearn_InferenceBackend_Response& CMsgSteamLearn_Inference_Response::_internal_backend_response() const {
  const ::CMsgSteamLearn_InferenceBackend_Response* p = _impl_.backend_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearn_InferenceBackend_Response&>(
      ::_CMsgSteamLearn_InferenceBackend_Response_default_instance_);
}
inline const ::CMsgSteamLearn_InferenceBackend_Response& CMsgSteamLearn_Inference_Response::backend_response() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearn_Inference_Response.backend_response)
  return _internal_backend_response();
}
inline void CMsgSteamLearn_Inference_Response::unsafe_arena_set_allocated_backend_response(
    ::CMsgSteamLearn_InferenceBackend_Response* backend_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.backend_response_);
  }
  _impl_.backend_response_ = backend_response;
  if (backend_response) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearn_Inference_Response.backend_response)
}
inline ::CMsgSteamLearn_InferenceBackend_Response* CMsgSteamLearn_Inference_Response::release_backend_response() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearn_InferenceBackend_Response* temp = _impl_.backend_response_;
  _impl_.backend_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearn_InferenceBackend_Response* CMsgSteamLearn_Inference_Response::unsafe_arena_release_backend_response() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearn_Inference_Response.backend_response)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearn_InferenceBackend_Response* temp = _impl_.backend_response_;
  _impl_.backend_response_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearn_InferenceBackend_Response* CMsgSteamLearn_Inference_Response::_internal_mutable_backend_response() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.backend_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearn_InferenceBackend_Response>(GetArenaForAllocation());
    _impl_.backend_response_ = p;
  }
  return _impl_.backend_response_;
}
inline ::CMsgSteamLearn_InferenceBackend_Response* CMsgSteamLearn_Inference_Response::mutable_backend_response() {
  ::CMsgSteamLearn_InferenceBackend_Response* _msg = _internal_mutable_backend_response();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearn_Inference_Response.backend_response)
  return _msg;
}
inline void CMsgSteamLearn_Inference_Response::set_allocated_backend_response(::CMsgSteamLearn_InferenceBackend_Response* backend_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.backend_response_;
  }
  if (backend_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(backend_response);
    if (message_arena != submessage_arena) {
      backend_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backend_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.backend_response_ = backend_response;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearn_Inference_Response.backend_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ESteamLearnDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamLearnDataType>() {
  return ::ESteamLearnDataType_descriptor();
}
template <> struct is_proto_enum< ::ESteammLearnRegisterDataSourceResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteammLearnRegisterDataSourceResult>() {
  return ::ESteammLearnRegisterDataSourceResult_descriptor();
}
template <> struct is_proto_enum< ::ESteamLearnCacheDataResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamLearnCacheDataResult>() {
  return ::ESteamLearnCacheDataResult_descriptor();
}
template <> struct is_proto_enum< ::ESteamLearnSnapshotProjectResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamLearnSnapshotProjectResult>() {
  return ::ESteamLearnSnapshotProjectResult_descriptor();
}
template <> struct is_proto_enum< ::ESteamLearnGetHMACKeysResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamLearnGetHMACKeysResult>() {
  return ::ESteamLearnGetHMACKeysResult_descriptor();
}
template <> struct is_proto_enum< ::ESteamLearnInferenceResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamLearnInferenceResult>() {
  return ::ESteamLearnInferenceResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsteamlearn_2esteamworkssdk_2eproto
